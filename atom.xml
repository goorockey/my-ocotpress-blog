<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Goorockey's Life]]></title>
  <link href="http://goorockey.github.com/atom.xml" rel="self"/>
  <link href="http://goorockey.github.com/"/>
  <updated>2012-10-28T17:50:23+08:00</updated>
  <id>http://goorockey.github.com/</id>
  <author>
    <name><![CDATA[Goorockey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[玩一下hadoop]]></title>
    <link href="http://goorockey.github.com/blog/2012/10/21/try-hadoop/"/>
    <updated>2012-10-21T23:47:00+08:00</updated>
    <id>http://goorockey.github.com/blog/2012/10/21/try-hadoop</id>
    <content type="html"><![CDATA[
<p>由于某种原因，今天玩了一下<a href="http://hadoop.apache.org/" title="Hadoop">Hadoop</a>。正确来说，我是玩<a href="http://code.google.com/p/hop/" title="HOP">HOP</a>，一个Hadoop的修改版本。</p>

<blockquote><p>The Hadoop Online Prototype (HOP) is a modified version of Hadoop MapReduce that allows data to be pipelined between tasks and between jobs. This can enable better cluster utilization and increased parallelism, and allows new functionality: online aggregation (approximate answers as a job runs), and stream processing (MapReduce jobs that run continuously, processing new data as it arrives).</p></blockquote>

<p>就是多了pipeline（流水线）的Hadoop。分布式流水线可以有效加快各jobs在各节点的同步运算。</p>

<h3 id="section">准备</h3>

<p>我是在linux上弄的，windows下用cygwin也行。</p>

<p>下载HOP压缩包后，看里面的docs就够了，同时src/example还有一些例子。</p>

<p>确保ssh,sshd,rsync,jdk都有了。同时要保证ssh localhost不要输入密码的认证步骤。具体docs/quickstart也有说，可以这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
</span><span class="line">$ cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后是设置jdk的目录，修改conf/hadoop-env.sh中JAVA_HOME。一般为/usr/lib/jvm/下的某个java目录，我就直接写成/usr/lib/jvm/default-java了。</p>

<p>这时候执行bin/hadoop就会出现帮助信息了。</p>

<h3 id="section-1">跑例程</h3>

<!-- more -->

<p>Hadoop的文件系统叫<a href="http://hadoop.apache.org/docs/stable/hdfs_design.html" title="HDFS">HDFS</a>（Hadoop distribution filesystem)，是一个分布式文件系统。每份数据都会在多个节点有备份，以容错、修复。所有数据都要先放进HDFS才能Hadoop处理。</p>

<p>Hadoop的分布式体系中，有一个NameNode，是master的角色，负责主控各节点，有多个DataNode，是slave，负责真正存储数据。这些可以在conf/master和conf/slave设置。
同时还有一个JobTracker，负责调度jobs，默认就是NameNode这个主机一起充当NameNode，这个在conf/hadoop-site.xml设置。另外所有DataNode都是TaskTracker，负责执行jobs。具体更多对conf/hadoop-site.xml的配置参看docs/cluster_setup.html</p>

<p>执行bin/hadoop namenode -format，会创造一个namenode。文件都已某种格式放在/tmp/hadoop-“hostname”那里。</p>

<p>执行bin/start-all.sh会启动hadoop，默认通过http://localhost:50070/可以访问NameNode，http://localhost:50030/可以访问JobTracker。</p>

<p>现在执行一个例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir input
</span><span class="line">$ cp conf/*.xml input/
</span><span class="line">
</span><span class="line">$ bin/hadoop fs -put intput input   # 把当前文件系统input目录复制为HDFS的input
</span><span class="line">$ bin/hadoop jar hadoop-*-examples.jar grep input output 'dfs[a-z.]+'  # 执行所有example.jar，后面的是参数
</span><span class="line">
</span><span class="line"># 一段时间后，执行完毕 #
</span><span class="line">$ bin/hadoop fs -get output output # 把HDFS中的output目录复制为当前文件系统的ouput
</span><span class="line">$ cat output/* # 打印结果
</span><span class="line">
</span><span class="line"># 或者直接对HDFS操作 #
</span><span class="line">$ bin/hadoop fs -ls output
</span><span class="line">$ bin/hadoop fs -cat output/*</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="wordcount">WordCount例子</h3>

<p><a href="http://hadoop.apache.org/docs/stable/mapred_tutorial.html" title="WordCount">WordCount</a>是hadoop中的另一个例子</p>

<p>Hadoop是通过<a href="http://wiki.apache.org/hadoop/HadoopMapReduce" title="MapReduce">MapReduce</a>机制来处理大数据的。Map阶段分割输入的数据，并整合成&lt;key,value&gt;的对应关系。每对&lt;key,value&gt;对送到Combiner做每个key的整合，当整合出一定数量的&lt;key,value&gt;后，&lt;key,value&gt;会送到Reducer做处理输出最终的&lt;key,value&gt;。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(input) &lt;k1, v1&gt; -&gt; map -&gt; &lt;k2, v2&gt; -&gt; combine -&gt; &lt;k2, v2&gt; -&gt; reduce -&gt; &lt;k3, v3&gt; (output)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>按照<a href="http://hadoop.apache.org/docs/stable/mapred_tutorial.html" title="WordCount">WordCount</a>中的代码编辑WordCount.java，然后编译打包生成wordcount.jar:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir wordcount_classes
</span><span class="line">$ javac -classpath hadoop-hop-0.2-core.jar -d wordcount_classes WordCount.java
</span><span class="line">$ jar -cvf wordcount.jar -C wordcount_classes/ .</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后自行构造一些要统计的文件，放在input目录下。这时候注意，在执行了上一次例子后，如果想把输入文件还是放在HDFS的input下，要先清空原来的文件:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ bin/hadoop fs -rmr input/
</span><span class="line">$ bin/hadoop fs -rmr output/
</span><span class="line">
</span><span class="line">$ bin/hadoop fs -put input input # 把输入文件目录input重新放到HDFS中
</span><span class="line">
</span><span class="line">$ bin/hadoop jar wordcount.jar org.myorg.WordCount input output  # 执行wordcount.jar
</span><span class="line">
</span><span class="line"># 执行一段时间后完毕 #
</span><span class="line">
</span><span class="line">$ bin/hadoop fs -cat output/*  # 打印结果</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">结语</h3>

<p>尝试了一下Hadoop，还有更多有待研究
<br />
            <br />
            转载请注明原文链接
            <a href="http://goorockey.github.com/blog/2012/10/21/try-hadoop/">http://goorockey.github.com/blog/2012/10/21/try-hadoop/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于exploit exercise nebula level01]]></title>
    <link href="http://goorockey.github.com/blog/2012/10/10/about-exploit-exercise-nebula-level01/"/>
    <updated>2012-10-10T23:26:00+08:00</updated>
    <id>http://goorockey.github.com/blog/2012/10/10/about-exploit-exercise-nebula-level01</id>
    <content type="html"><![CDATA[<p>今天做<a href="http://exploit-exercises.com/">exploit exercise</a>的nebula <a href="http://exploit-exercises.com/nebula/level01">level01</a>，长见识了，记录一下。</p>

<h3 id="section">题目</h3>

<p>题目提供了/home/flag01/下flag01的源码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">gid_t</span> <span class="n">gid</span><span class="p">;</span>
</span><span class="line">    <span class="n">uid_t</span> <span class="n">uid</span><span class="p">;</span>
</span><span class="line">    <span class="n">gid</span> <span class="o">=</span> <span class="n">getegid</span><span class="p">();</span>
</span><span class="line">    <span class="n">uid</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">setresgid</span><span class="p">(</span><span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">,</span> <span class="n">gid</span><span class="p">);</span>
</span><span class="line">    <span class="n">setresuid</span><span class="p">(</span><span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">system</span><span class="p">(</span><span class="s">&quot;/usr/bin/env echo and now what?&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>flag01的权限：</p>

<p>-rwsr-x— 1 flag01 level01 7322 2011-11-20 21:22 flag01</p>

<p>flag01的uid是用户flag01,gid是level01,suid位被使能了</p>

<!-- more -->

<p><strong>解决方法</strong>网上都有：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ export PATH=/tmp:$PATH    # 把/tmp加到环境变量PATH的最前头
</span><span class="line">$ cat "/bin/bash" &gt;&gt; /tmp/echo # 在/tmp创建一个echo文件，里面是执行bash
</span><span class="line">$ chmod +x /tmp/echo # 把/tmp/echo设为执行文件
</span><span class="line">$ /home/flag01/flag01 # 执行/home/flag01下的flag01
</span><span class="line">
</span><span class="line"># 顺利以用户flag01起bash
</span><span class="line">$ getflag # 通关</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">原理</h3>

<p>主要原理网上的解法都说得很明白，就是通过env使得执行的echo是我们创建的假echo，成功以用户flag01的权限起bash</p>

<p>我想记录的主要是前面关于uid,gid的操作。</p>

<p><strong>为什么system之前会有getegid,setresgid这些操作呢？没有会怎样？这还会成功吗？</strong></p>

<p>答案是不行的！在<a href="http://stackoverflow.com/questions/8304396/what-is-vulnerable-about-this-c-code">stackoverflow</a>找到解答:</p>

<blockquote><p>Note that the setting of real user ID, effective user ID and saved set-user-ID by a call to setresuid() before the call to system() in the vulnerable code posted in the question allows one to exploit the vulnerability even when only effective user ID is set to a privileged user ID and real user ID remains unprivileged (as is for example the case when relying on set-user-ID bit on a file as above). Without the call to setresuid() the shell run by system() would reset the effective user ID back to the real user ID making the exploit ineffective. However, in the case when the vulnerable code is run with real user ID of a privileged user, system() call alone is enough.</p><p>man page of sh:<br />If the shell is started with the effective user (group) id not equal to the real user (group) id, and the -p option is not supplied, no startup files are read, shell functions are not inherited from the environment, the SHELLOPTS variable, if it appears in the environment, is ignored, and the effective user id is set to the real user id. If the -p option is supplied at invocation, the startup behavior is the same, but the effective user id is not reset.</p></blockquote>

<h3 id="real-user-id-effective-user-idsaved-set-user-id-set-user-id-bit">real user ID, effective user ID，saved set-user-ID, set-user-ID bit</h3>

<p>首先明确什么是real user ID, effective user ID，saved set-user-ID, set-user-ID bit</p>

<ul>
  <li>real user ID 就是起进程的用户ID。</li>
  <li>effective user ID是进程的有效用户ID，决定这个进程对文件系统操作的权限。如果它是root，那这个进程的操作就是以root的权限了。</li>
  <li>set-user-id bit是程序的一个特征位，默认不使能，可以通过chmod +s 设置。当set-user-id被使能时，此程序叫SUID程序，程序启动时进程的effective user ID就是这个程序的uid；当set-user-id没被使能，则effective user ID是执行者real user ID。</li>
  <li>saved set-user-ID保存着进程启动时effective user ID的值。</li>
</ul>

<p>因为进程内可以通过setuid等来设置effective user ID，也就改变了进程对文件系统操作的权限。但这不是可以随便设为任意的id的。</p>

<ul>
  <li>如果进程有管理员权限，则setuid可以把effective user ID设为任意id.</li>
  <li>如果进程没有管理员权限，则setuid只能把effective user ID设为real user ID或者saved set-user-id。</li>
</ul>

<p>这就知道saved set-user-ID有什么用了。它就是当程序是SUID程序时，effective user ID可以被设为real user ID和程序启动时的effective user ID，saved set-user-ID就是用来保存这个程序启动时effective user ID的值的，使得setuid可以把effective user ID可以从real user ID设回来。</p>

<h3 id="bash">bash</h3>

<p>然后就是起bash时，如果effective user ID跟real user ID不同，且real user ID不是管理员权限用户，则会把effective user ID设回real user ID。</p>

<p>而我们这样如果没有setresgid,setresuid的话，real user ID是level01, effective user ID是flag01, 起bash时，effective user ID会被设回real user ID，那还只是以level01起bash，而不是flag01起bash了。</p>

<h3 id="system">system()的安全问题</h3>

<p>在这里也可以看到system()是有安全问题的，因为system()里面是fork完就直接调用execl，使得继承了父进程的effective user ID的子进程执行新的程序。</p>

<p>APUE也说了:</p>

<blockquote><p>If it is running with special permissions&#8211;eithere set-user-ID or set-group-ID&#8211;and wants to spawn another process, a process should use fork() and exec() directly, being certain to change back to normal permissions after the fork(), before calling exec(). The system() function should never be used from a set-user-ID or a set-groupd-ID program.</p></blockquote>

<p>意思在SUID程序中，不应该用system()，而是自己写fork()和exec()来实现，并在fork和exec中间，自己处理好id权限问题。</p>

<h3 id="section-2">结语</h3>

<p>之前看APUE，用户id这里看得一头雾水，通过这个exercise，总算有点感觉了。
<br />
            <br />
            转载请注明原文链接
            <a href="http://goorockey.github.com/blog/2012/10/10/about-exploit-exercise-nebula-level01/">http://goorockey.github.com/blog/2012/10/10/about-exploit-exercise-nebula-level01/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python发邮件脚本]]></title>
    <link href="http://goorockey.github.com/blog/2012/09/30/python-send-mail/"/>
    <updated>2012-09-30T00:40:00+08:00</updated>
    <id>http://goorockey.github.com/blog/2012/09/30/python-send-mail</id>
    <content type="html"><![CDATA[
<p>项目组有每天值日搞卫生和发工作日报的规定，由于不提醒容易忘记，则想到通过内部邮件定时提醒，练练手。</p>

<p>整个“任务”可以分为发邮件+定时两部分。</p>

<hr />

<h3 id="section">1. 发邮件</h3>

<p>由于服务器是windows系统，google得知，windows下有<a href="http://www.blat.net">blat</a>这发邮件的大杀器，所以刚开始是想用blat+批处理做的。</p>

<p>执行blat -h 或者看官网上的帮助，使用blat发邮件还是很简单的（所以官网特别提醒不要用blat来发SPAM。。)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>blat基本用法 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">blat &lt;邮件正文文件&gt; -from &lt;发送地址&gt; -to &lt;接受地址&gt; -subject &lt;邮件标题&gt; 
</span><span class="line">        -server &lt;smtp服务器地址&gt; -username &lt;登录服务器用户名&gt; -password &lt;密码&gt;
</span><span class="line">
</span><span class="line">blat - -body &lt;邮件正文&gt; -from &lt;发送地址&gt; -to &lt;接受地址&gt; -subject &lt;邮件标题&gt; 
</span><span class="line">        -server &lt;smtp服务器地址&gt; -username &lt;登录服务器用户名&gt; -password &lt;密码&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>blat还可以通过-install把参数保存到注册表。blat确实是自动发邮件的大杀器！</p>

<p><em>P.S 在linux实现自动发邮件，可以用msmtp,sendmail等～</em></p>

<hr />

<p>这本来是很简单的，但因为任务要根据星期几发送邮件给指定的人，而且我们是12个人分成两周，所以想到用一个二维数组存放成员来实现，这也没什么问题。</p>

<p>问题在于在计算要提醒的人时，要根据今天离开始值日的天数，来从数组获取成员，而这求天数在windows用批处理可不好搞，因为要考虑每月不同天数和闰年啊。</p>

<p>当然也不是不能完成，网上也有方法:</p>

<ul>
  <li>http://bbs.bathome.net/thread-11128-1-1.html</li>
  <li>http://bbs.bathome.net/viewthread.php?tid=5659&amp;highlight=%2Bbatman</li>
  <li>http://bbs.bathome.net/viewthread.php?tid=5682&amp;highlight=%2Bbatman</li>
</ul>

<p>嫌麻烦，我还是决定找有现成库的方法来做，所以就想到用有各种库的python实现了。</p>

<!-- more -->

<hr />

<p>python有<a href="http://docs.python.org/library/smtplib.html" title="smtplib">smtplib</a>库实现smtp发邮件，核心代码也很简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>using smtplib  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">smtplib</span>
</span><span class="line"><span class="c"># some code ...</span>
</span><span class="line"><span class="n">smtp</span> <span class="o">=</span> <span class="n">smtplib</span><span class="o">.</span><span class="n">SMTP</span><span class="p">()</span>
</span><span class="line"><span class="n">smtp</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
</span><span class="line"><span class="n">smtp</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class="line"><span class="n">smtp</span><span class="o">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span>
</span><span class="line"><span class="n">smtp</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而用python计算相差的天数更是简单不过：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class="line"><span class="c"># some code ...</span>
</span><span class="line"><span class="n">days</span> <span class="o">=</span> <span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">30</span><span class="p">))</span><span class="o">.</span><span class="n">days</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">2.定时</h3>
<p>定时在windows可以用计划任务实现</p>

<p>P.S 在linux可以用cron实现</p>

<h3 id="section-2">3.整个代码</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#coding=utf-8</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">smtplib</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">email.mime.text</span> <span class="kn">import</span> <span class="n">MIMEText</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">email.header</span> <span class="kn">import</span> <span class="n">Header</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">member</span> <span class="o">=</span> <span class="p">((</span><span class="s">&#39;member1&#39;</span><span class="p">,</span> <span class="s">&#39;member2&#39;</span><span class="p">,</span> <span class="s">&#39;member3&#39;</span><span class="p">,</span> <span class="s">&#39;member4&#39;</span><span class="p">,</span> <span class="s">&#39;member5&#39;</span><span class="p">,</span> <span class="s">&#39;member6&#39;</span><span class="p">),</span>
</span><span class="line">        <span class="p">(</span><span class="s">&#39;member7&#39;</span><span class="p">,</span> <span class="s">&#39;member8&#39;</span><span class="p">,</span> <span class="s">&#39;member9&#39;</span><span class="p">,</span> <span class="s">&#39;member10&#39;</span><span class="p">,</span> <span class="s">&#39;member11&#39;</span><span class="p">,</span> <span class="s">&#39;member12&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">suffix</span> <span class="o">=</span> <span class="s">&#39;@abc.com&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">send_mail</span><span class="p">(</span><span class="n">receiver</span><span class="p">,</span> <span class="n">content_filename</span><span class="p">,</span>
</span><span class="line">            <span class="n">sender</span> <span class="o">=</span> <span class="s">&#39;admin@abc.com&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="n">server</span> <span class="o">=</span> <span class="s">&#39;192.168.1.1&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="n">username</span> <span class="o">=</span> <span class="s">&#39;admin@abc.com&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="n">password</span> <span class="o">=</span> <span class="s">&#39;admin&#39;</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="n">subject</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line">    <span class="n">content</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># 从文件读取邮件正文</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="n">content_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">content_filename</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="n">subject</span> <span class="o">=</span> <span class="n">content_file</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class="line">            <span class="n">content</span> <span class="o">=</span> <span class="n">content_file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">            <span class="c"># 转为utf-8</span>
</span><span class="line">            <span class="n">subject</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;gbk&#39;</span><span class="p">,</span> <span class="s">&#39;ignore&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="n">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;gbk&#39;</span><span class="p">,</span> <span class="s">&#39;ignore&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">finally</span><span class="p">:</span>
</span><span class="line">            <span class="n">content_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">    <span class="k">except</span> <span class="ne">IOError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">        <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;cannot open file &quot;</span> <span class="o">+</span> <span class="n">content_filename</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">
</span><span class="line">    <span class="n">content</span> <span class="o">=</span> <span class="n">content</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n\n</span><span class="s">系统生成，请勿回复 :)&quot;</span>
</span><span class="line">    <span class="c">#print content</span>
</span><span class="line">
</span><span class="line">    <span class="c"># 构造邮件</span>
</span><span class="line">    <span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="s">&#39;plain&#39;</span><span class="p">,</span> <span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">msg</span><span class="p">[</span><span class="s">&#39;Subject&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Header</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">msg</span><span class="p">[</span><span class="s">&#39;From&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sender</span>
</span><span class="line">    <span class="n">msg</span><span class="p">[</span><span class="s">&#39;To&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">receiver</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="c"># stmp模块发送邮件</span>
</span><span class="line">            <span class="n">smtp</span> <span class="o">=</span> <span class="n">smtplib</span><span class="o">.</span><span class="n">SMTP</span><span class="p">()</span>
</span><span class="line">            <span class="n">smtp</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
</span><span class="line">            <span class="n">smtp</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class="line">            <span class="n">smtp</span><span class="o">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">as_string</span><span class="p">())</span>
</span><span class="line">            <span class="n">smtp</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;Success&quot;</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line">        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_on_duty</span><span class="p">():</span>
</span><span class="line">    <span class="n">receiver</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class="line">    <span class="n">days</span> <span class="o">=</span> <span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span><span class="o">.</span><span class="n">days</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">days</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">days</span> <span class="o">=</span> <span class="n">days</span> <span class="o">+</span> <span class="mi">1</span> <span class="c"># 提前一天提醒</span>
</span><span class="line">        <span class="n">week</span> <span class="o">=</span> <span class="p">(</span><span class="n">days</span> <span class="o">/</span> <span class="mi">7</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">date</span> <span class="o">=</span> <span class="p">(</span><span class="n">days</span> <span class="o">%</span> <span class="mi">7</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="c"># 周六发周一的值日</span>
</span><span class="line">        <span class="k">if</span> <span class="n">date</span> <span class="o">==</span> <span class="mi">6</span><span class="p">:</span>
</span><span class="line">            <span class="n">date</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="n">week</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">member</span><span class="p">)</span> <span class="ow">and</span> <span class="n">date</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">member</span><span class="p">[</span><span class="n">week</span><span class="p">])</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">member</span><span class="p">[</span><span class="n">week</span><span class="p">][</span><span class="n">date</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="n">receiver</span> <span class="o">=</span> <span class="n">member</span><span class="p">[</span><span class="n">week</span><span class="p">][</span><span class="n">date</span><span class="p">]</span> <span class="o">+</span> <span class="n">suffix</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">receiver</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="n">job</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="c"># 值日</span>
</span><span class="line">        <span class="k">if</span> <span class="n">job</span> <span class="o">==</span> <span class="s">&#39;duty&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="n">receiver</span> <span class="o">=</span> <span class="n">get_on_duty</span><span class="p">()</span>
</span><span class="line">            <span class="k">print</span> <span class="n">receiver</span>
</span><span class="line">
</span><span class="line">            <span class="n">content_filename</span> <span class="o">=</span> <span class="s">&#39;duty.txt&#39;</span>
</span><span class="line">            <span class="k">if</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">weekday</span><span class="p">()</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
</span><span class="line">                <span class="n">content_filename</span> <span class="o">=</span> <span class="s">&#39;duty_Sat.txt&#39;</span>
</span><span class="line">
</span><span class="line">            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">receiver</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">suffix</span><span class="p">):</span>
</span><span class="line">                <span class="n">send_mail</span><span class="p">(</span><span class="n">receiver</span> <span class="o">=</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">content_filename</span> <span class="o">=</span> <span class="n">content_filename</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="c"># 每天日报提醒</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">job</span> <span class="o">==</span> <span class="s">&#39;daily&#39;</span><span class="p">:</span>
</span><span class="line">            <span class="n">send_mail</span><span class="p">(</span><span class="n">receiver</span> <span class="o">=</span> <span class="s">&#39;partner&#39;</span><span class="p">,</span> <span class="n">content_filename</span> <span class="o">=</span> <span class="s">&#39;daily_alert.txt&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><br />
            <br />
            转载请注明原文链接
            <a href="http://goorockey.github.com/blog/2012/09/30/python-send-mail/">http://goorockey.github.com/blog/2012/09/30/python-send-mail/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scheme里面的pair和list]]></title>
    <link href="http://goorockey.github.com/blog/2012/09/25/pair-and-list-in-scheme/"/>
    <updated>2012-09-25T22:41:00+08:00</updated>
    <id>http://goorockey.github.com/blog/2012/09/25/pair-and-list-in-scheme</id>
    <content type="html"><![CDATA[<p>最近学scheme，总结一下pair和list的区别，主要是两点：</p>

<h4 id="listpairnulllistpairlist">1. list一定是pair，但只有以null（空list）结尾的pair才是list</h4>

<p>对于(define list1 (list a b c)),list1表现为(a b c),其实也可以写成(a . (b . ()))。</p>

<p>可以看到list其实就是pair,而且是以null结尾的pair。</p>

<p>对于像(a.(b.(c.d)))这样的连续pair，因为没有以空list结尾，所以不是list</p>

<p>所以有：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>cmdline </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; (define x '(1 2))
</span><span class="line">&gt; x
</span><span class="line">(1 2)
</span><span class="line">&gt; (list? x)
</span><span class="line">#t
</span><span class="line">&gt; (cons? x)
</span><span class="line">#t
</span><span class="line">&gt; (cddr x) ; 以null结尾
</span><span class="line">()
</span><span class="line">
</span><span class="line">&gt; (define y (cons 1 2))
</span><span class="line">&gt; (list? y)
</span><span class="line">#f
</span><span class="line">&gt; (cons? y)
</span><span class="line">#f
</span><span class="line">&gt; (set-cdr! y '()) ; 把y的cdr设为null，使y变成list
</span><span class="line">&gt; y
</span><span class="line">(1)
</span><span class="line">&gt; (list? y) ; 变成了list
</span><span class="line">#t
</span><span class="line">&gt; (cons? y)
</span><span class="line">#t</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pair">2. pair的显示规则</h4>

<p>引用<a href="http://download.plt-scheme.org/doc/html/guide/Pairs__Lists__and_Scheme_Syntax.html">这里</a>的解释：</p>

<blockquote><p>In general, the rule for printing a pair is as follows: use the dot notation always, but if the dot is immediately followed by an open parenthesis, then remove the dot, the open parenthesis, and the	matching close parenthesis. Thus, (0 . (1 . 2)) becomes (0 1 . 2), and (1 . (2 . (3 . ()))) becomes (1 2 3).</p></blockquote>

<p>大意就是，如果pair的“点”紧接着小括号，则这个点和小括号都可以去掉。</p>

<p>所以(a.(b.c))等价于(a b.c), (a.(b.(c.())))等价于(a b c)。
<br />
            <br />
            转载请注明原文链接
            <a href="http://goorockey.github.com/blog/2012/09/25/pair-and-list-in-scheme/">http://goorockey.github.com/blog/2012/09/25/pair-and-list-in-scheme/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Wordpress转到Octopress]]></title>
    <link href="http://goorockey.github.com/blog/2012/09/09/try-octopress/"/>
    <updated>2012-09-09T20:53:00+08:00</updated>
    <id>http://goorockey.github.com/blog/2012/09/09/try-octopress</id>
    <content type="html"><![CDATA[<p>想尝试<a href="http://octopress.org">Octopress</a>很久了。</p>

<p><a href="http://octopress.org">Octopress</a>自称为A blogging framework for <strong>hackers</strong></p>

<p>玩<a href="http://octopress.org">Octopress</a>主要会涉及到以下技术:</p>

<ul>
  <li>git </li>
  <li>ruby</li>
  <li>markdown</li>
</ul>

<p>这些技术对我来说还是很陌生，也好借此机会熟悉熟悉～</p>

<p>总的来说，[Octopress］想对于Wordpress的优势有:</p>

<ul>
  <li>静态页面，速度快</li>
  <li>分布式存储，保证数据的安全。而且即使不能上网，也能本地写博客和预览</li>
  <li>支持用markdown（当然wordpress也有markdown的插件, 但Octopress在命令行写博客更cool)</li>
</ul>

<!--more-->

<p>仿照着，写了个友情链接侧栏的插件, 当然直接在source/_include/asides/ 写静态页面也可以，纯练手:</p>

<div><script src="https://gist.github.com/3689183.js?file="></script>
<noscript><pre><code>################################# 
#   File name:   blog_link.rb
#   Description:    Plugin for Octopress to show link widget at sidebar
#   Author: goorockey
#   Usage:  1.put this file to plugins/
#           2.write a xml file having your link information, and put it to source/.The format of xml file is &lt;xml&gt;&lt;blog&gt;&lt;name&gt;abc&lt;/name&gt;&lt;link&gt;http://abc.com&lt;link&gt;&lt;/blog&gt; ... &lt;/xml&gt;
#           3.add &quot;blog_link_file: &quot; attribute to your _config.yml,which is your link xml file created at step 2
#################################

require 'rexml/document'
require 'open-uri'

module Jekyll
  class BlogLinkTag &lt; Liquid::Tag
    def render(context)
    html = &quot;&quot;
    blog_link_file = context.registers[:site].config['blog_link_file']
    blog_link_url = context.registers[:site].config['url'] + &quot;/&quot; +  blog_link_file

    if File.exists?(blog_link_file)
      File.delete(blog_link_file)
    end

    File.open(blog_link_file, 'wb') do |output|
        open(blog_link_url) do |input|
            output &lt;&lt; input.read
        end
    end

    if File.exists?(blog_link_file)
      xml = REXML::Document.new(File.open(blog_link_file))

      xml.each_element('//blog') do |elem|
        blog_name = elem.elements['name'].text
        blog_link = elem.elements['link'].text
        html &lt;&lt; &quot;&lt;li class='blog_link'&gt;&lt;a href=#{blog_link}&gt;#{blog_name}&lt;/a&gt;&lt;/li&gt;&quot;
      end

    end
    html
    end
  end
end

Liquid::Template.register_tag('blog_link', Jekyll::BlogLinkTag)
</code></pre></noscript></div>

<p><br />
            <br />
            转载请注明原文链接
            <a href="http://goorockey.github.com/blog/2012/09/09/try-octopress/">http://goorockey.github.com/blog/2012/09/09/try-octopress/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用VMWare组网，实验DNS隧道]]></title>
    <link href="http://goorockey.github.com/blogs/77254"/>
    <updated>2012-03-15T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77254</id>
    <content type="html"><![CDATA[<p>继续用VMWare来组网，这次要测试我想试很久的DNS隧道，之前碍于没有找到有独立ip的方法（当然是要免费的~~），现在用VMWare就可以了。</p>
<p>DNS隧道是什么就不解释了。google一下DNS隧道能搜到风河、云风两个大牛相关的blog。这次我用iodine来实现DNS隧道。</p>
<p><!--more--><br />
<h6><strong></strong> </h6><br />
<h6><strong>1、场景</strong> </h6><br />
现在情况是，用户只能跟外界有DNS通路，想借此进行平常的http、ftp等通信。</p>
<p>据说平常的CMCC等开放热点，虽然http等要账号和密码，但DNS是通的，然后你懂的了。</p>
<p>&nbsp;</p>
<p>简单的拓扑图如下：</p>
<p><a href="http://www.goorockey.com/uploads/2012/03/image2.png"><img style="display: inline; border: 0px;" title="image" src="http://www.goorockey.com/uploads/2012/03/image_thumb2.png" alt="image" width="454" height="306" border="0" /></a></p>
<p>整个回路就是：<br />
<ul><br />
	<li>用户把要想跟外网进行通信的数据包用DNS协议封装</li><br />
	<li>得到的DNS包发送给DNS服务器，要求做DNS解析</li><br />
	<li>DNS服务器根据域名，解析出DNS代理的ip，并把数据包发给它</li><br />
	<li>DNS代理把数据包解封，并转发给外网的目标地址</li><br />
	<li>外网回复的数据包原路返回，这样就完成通讯了。</li></p>
</ul>
<p><strong></strong> <br />
<h6><strong>2、VMWare环境模拟</strong></h6><br />
这次我用了三台机子，系统还是CentOS 6.0：</p>
<p> <strong>主机名 <strong>角色 <strong>网卡ip</strong></strong></strong></p>
<p>HostA   用户 192.168.149.128 (Host-only)</p>
<p>HostB   DNS代理 192.168.126.130 (<span class="caps">NAT</span>)</p>
<p>HostC   DNS服务器 192.168.149.130 (Host-only)、192.168.126.233 (<span class="caps">NAT</span>)</p>
<p>&nbsp;</p>
<p>要模拟的初始状态就是：<br />
<ul><br />
	<li>HostA（用户）可以跟HostC做DNS解析，但不能访问外网 。     （所以虚拟网卡用Host-only模式）</li><br />
	<li>HostB（DNS代理）可以跟外网通信。            （用NAT和Bridged都可以，这次我选用NAT）</li><br />
	<li>HostC（DNS服务器）可以跟HostA进行DNS解析，且能跟HostB通信。   （所以用两张网卡，为了分别跟HostA和HostB通信）</li><br />
	<li>HostA的iptables不允许HostA和HostB之间互访</li></p>
</ul>
<p>&nbsp;<br />
<h6><strong>3、DNS服务器配置</strong></h6><br />
刚开始看教程好像很繁琐，感觉conf文件好多啊，而且配置项也多~~</p>
<p>静下心来看，其实要实现最基本的的DNS解析很简单，主要就是修改两个文件。</p>
<p>&nbsp;</p>
<p><strong>（1）安装</strong></p>
<p>需要在HostC执行以下命令，安装DNS服务器所需的bind和caching-nameserver：<br />
<blockquote><span style="color: #222222;">$ yum install –y bind bind-utils bind-chroot caching-nameserver</span></blockquote><br />
<strong></strong> </p>
<p><strong>（2）修改named的conf文件（/etc/named.conf）</strong></p>
<p>添加域名goorockey.go域名的配置：<br />
<blockquote><span style="color: #222222;">zone “goorockey.go” IN {</span></p>
<p><span style="color: #222222;">        type   master;</span></p>
<p><span style="color: #222222;">        file      “goorockey.go.zone”;</span></p>
<p><span style="color: #222222;">         allow-update {none; };</span></p>
<p><span style="color: #222222;">}</span></blockquote><br />
大概解释：<br />
<ul><br />
	<li>zone “ goorockey.go”： 指示要添加goorockey.go这个域名的正向解析。正向解析就是指域名到ip的解析，反向解析是指ip到域名的解析。例如想通过查询DNS服务器，知道192.168.0.1判定了多少域名，则在DNS服务器上配置zone “1.0.168.192.in-addr-arpa”的项。</li><br />
	<li>type master：对于goorockey.go这个域名，当前DNS服务器是它的主DNS服务器。type可以还可以使hint和slave。只有zone “.”可以配置type hint。type slave是指对于这个域名，当前DNS服务器是辅助DNS服务器，即它的DNS记录是从主服务器拷贝过来的，目的是为了达到DNS解析的分布式、负载均衡。</li><br />
	<li>file “goorockey.go.zone”：这个域名的DNS记录文件在goorockey.go.zone，文件所在目录在/etc/named.conf的options项中的directory来定义。默认是/var/named</li><br />
	<li>allow-update：定义时候允许更新</li></p>
</ul>
<p>&nbsp;</p>
<p>要注意的是，/etc/named.conf中的options项是所有域名的全局配置。默认时，有：<br />
<blockquote>allow-query   {   localhost;   };</blockquote><br />
意思是只允许本机做DNS查询，当然要把它注释掉。<br />
<blockquote>listen-port    53    {  127.0.0.1;   };</blockquote><br />
意思是服务端口为53，但监听的ip是127.0.0.1，这样就不能让别的机子访问DNS解析服务了。所以可以把这句话注释掉，或者把ip改为0.0.0.0或指定ip。</p>
<p>&nbsp;</p>
<p><strong>（3）编辑goorockey.go的DNS记录文件</strong></p>
<p>根据我们在/etc/named.conf的配置，文件是/var/named/goorockey.go.zone。</p>
<p>创建此文件，并编辑内容为：<br />
<blockquote><span style="color: #222222;">@  IN   SOA   localhost.    root.localhost.      (  20120315   3600  1800  36000  3600  )</span></p>
<p><span style="color: #222222;">     IN    NS      localhost.</span></p>
<p><span style="color: #222222;">goorockey.go   IN   A    192.168.126.130</span></blockquote><br />
大概解释：<br />
<ul><br />
	<li>第一行是一条SOA记录。@指代当前域名，就是/etc/named中的goorockey.go。SOA记录是域名有效性的相关属性。localhost.是主服务器的地址。root.localhost.是邮箱。主要DNS记录文件的地址都用FQDN，每个地址最后的句号“.”表示结束。如果没有句号“.”，会自动追加域名，例如没有句号的localhost会解释成”localhost.goorockey.go“。后面就是具体属性项。</li><br />
	<li>第二行开始是两个空格，第一个空格表示继续上一条的内容，这里指”@“，第二个空格就是分割@和IN的。这一行表示域名goorockey.go的域名服务器是本机。</li><br />
	<li>第三行是一条A记录，A for address。意思就是域名goorockey.go会解析成ip 192.168.126.130。可以看出，搞这么久，就是为了找到这句话。所以说A记录是DNS服务器的核心，就是它标明DNS解析的。</li></p>
</ul>
<p>&nbsp;</p>
<p>DNS记录类型还会有：<br />
<ul><br />
	<li>PTR用在反向解析</li><br />
	<li>MX用在邮件服务器</li><br />
	<li>TXT就是纯文本，对DNS服务器做标注</li></p>
</ul>
<p>&nbsp;</p>
<p><strong>（4）运行DNS服务</strong></p>
<p>在HostC执行：<br />
<blockquote><span style="color: #222222;">$ service  named   start</span></blockquote><br />
或者<br />
<blockquote><span style="color: #222222;">$ /etc/init.d/named start</span></blockquote><br />
这就可以运行DNS服务了。</p>
<p>&nbsp;</p>
<p>对HostC的/etc/resolv.conf添加 nameserver 127.0.0.1</p>
<p>则在HostC用nslookup能成功返回DNS信息：</p>
<p><a href="http://www.goorockey.com/uploads/2012/03/20594453.png"><img style="display: inline; border: 0px;" title="20594453" src="http://www.goorockey.com/uploads/2012/03/20594453_thumb.png" alt="20594453" width="471" height="132" border="0" /></a></p>
<p>&nbsp;</p>
<p>但还要配置iptables，使其他机子可以访问DNS服务的端口。</p>
<p>对于默认的53端口，在HostC运行：<br />
<blockquote><span style="color: #222222;">$ iptables    –I  INPUT  -p  tcp   &#8212;dport 53   -j   <span class="caps">ACCEPT</span></span></p>
<p><span style="color: #222222;">$ iptables   –I  INPUT  -p  udp   &#8212;dport 53   -j  <span class="caps">ACCEPT</span></span></blockquote><br />
要解释一下的是，DNS包有可能以tcp或者udp方式传输。一般首选是udp方式。但因为udp包长度只能是512字节，也不能分包，所以如果当DNS包长度大于512时，就会选择tcp方式。所以这里要对tcp和udp都设置ACCEPT。</p>
<p>在HostA和HostB的/etc/resolv.conf添加HostA的ip后，就能正确解析goorockey.go了。</p>
<p>&nbsp;<br />
<h6><strong>4、iodine</strong></h6><br />
iodine是外国人写的开源DNS隧道工具，有linux版、windows版和Mac版的。</p>
<p>教程看它的ReadMe或者HowToSetup都比较清楚。</p>
<p>下载并安装对应自己版本的iodine后就能使用了。</p>
<p>&nbsp;</p>
<p>在DNS隧道的服务器端(HostB)，先执行：<br />
<blockquote><span style="color: #222222;">$ iodined   -f    10.0.0.1   goorockey.go</span></blockquote><br />
<span style="color: #222222;">输入密码后，服务端就运行了。注意服务端运行的是iodined，有”d“。</span></p>
<p>&nbsp;</p>
<p>在客户端（HostA)，执行：<br />
<blockquote><span style="color: #222222;">$ iodine   -f  -c  192.168.126.130 goorockey.go</span></blockquote><br />
其中192.168.126.130是服务端（HostB）的ip。</p>
<p>然后还要配置一下，HostA，HostB，HostC的iptables，使它们的DNS包可以通过就可以了。</p>
<p>&nbsp;</p>
<p>这时候，HostA的虚拟网卡ip是10.0.0.2，HostB的虚拟网卡ip是10.0.0.1。两台机子已经建立了VPN。</p>
<p>本来两台不能互访的机子就可以访问了。</p>
<p>例如在HostA就可以ssh HostB了 ：<br />
<blockquote><span style="color: #222222;">$ ssh 10.0.0.1</span></blockquote><br />
 然后就可以用ssh隧道过去来做代理了~~</p>
<p>&nbsp;<br />
<h6><strong>5、小结</strong></h6><br />
那时候看到DNS隧道，真是非常的兴奋，感觉太爽、太妙了。其实协议都可以这样做隧道，只是那时候没有意识到而已。</p>
<p>之后还继续想实验一下ICMP隧道，看一下iodine的代码。O(∩_∩)O哈哈~</p>
<p>&nbsp;<br />
<h6><strong>参考资料：</strong></h6><br />
<ul><br />
	<li>【风河的博文】<a title="http://www.nsbeta.info/archives/96" href="http://www.nsbeta.info/archives/96">http://www.nsbeta.info/archives/96</a></li><br />
	<li>【云风的博文】<a title="http://blog.codingnow.com/2011/06/dns_tunnel.html" href="http://blog.codingnow.com/2011/06/dns_tunnel.html">http://blog.codingnow.com/2011/06/dns_tunnel.html</a></li><br />
	<li>【iodine】<a title="http://code.kryo.se/iodine/" href="http://code.kryo.se/iodine/">http://code.kryo.se/iodine/</a></li></p>
</ul>
<p>&nbsp;</p>
<p>&nbsp;<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77254'>http://goorockey.github.com/blogs/77254</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMWare组网实验(NAT)]]></title>
    <link href="http://goorockey.github.com/blogs/77247"/>
    <updated>2012-03-13T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77247</id>
    <content type="html"><![CDATA[<p>本着“干中学”的精神，看完资料，还是用VMWare来练习一下使用NAT，好加深认识。</p>
<p>实验涉及：NAT，iptables，</p>
<p>&nbsp;</p>
<p><!--more--><br />
<h6><strong>1、实验目标</strong></h6><br />
这次我要用iptables实现NAT功能（SNAT和DNAT）。</p>
<p>先上拓扑图（可能有点不规范）：</p>
<p><a href="http://www.goorockey.com/uploads/2012/03/image.png"><img style="display: inline; border: 0px;" title="image" src="http://www.goorockey.com/uploads/2012/03/image_thumb.png" alt="image" width="405" height="273" border="0" /></a></p>
<p>如图分别有4台机子：A、B在内网，但在不同的网段中，C做网关，控制网段间的访问。D在外网。</p>
<p>要达到：<br />
<ul><br />
	<li>A、B能通信（内网不同网段的互访）</li><br />
	<li>A、B能通过C与外网通信</li><br />
	<li>D能通过C访问到A、B的服务</li></p>
</ul>
<p>&nbsp;<br />
<h6><strong>2、环境</strong></h6><br />
用VMWare虚拟出这4台机子，VMWare的版本为8.0</p>
<p>每台机子都跑CentOS 6.0</p>
<p>&nbsp;</p>
<p>&nbsp;<br />
<h6><strong>3、</strong>VMWare环境配置</h6><br />
安装4个虚拟机，都装上CentOS，主机名分别定为hostA、hostB、hostC、hostD，对应A、B、C、D。</p>
<p>VMWare新建几张网卡（菜单栏【edit】-【Virtual Network Editor】），要求一张为Bridged（NAT应该也行），两张为Host-only。<br />
<p align="left"><a href="http://www.goorockey.com/uploads/2012/03/151306312.png"><img style="display: inline; border: 0px;" title="151306312" src="http://www.goorockey.com/uploads/2012/03/151306312_thumb.png" alt="151306312" width="680" height="128" border="0" /></a></p><br />
设置A、B网卡分别为VMnet1和VMnet2，这是为了使它们原始都不能互访。</p>
<p>外网的D网卡设为VMnet0</p>
<p>C则有三张网卡VMnet0、VMnet1、VMnet2，这样C原始都能访问到A、B、D。</p>
<p>&nbsp;</p>
<p>然后进入每个虚拟机，为了方便，我都设置为静态ip（网段跟上图对应）：<br />
<blockquote>A：192.168.149.128</p>
<p>B：192.168.214.128</p>
<p>C：192.168.4.233（eth0），192.168.149.130（eth1），192.168.214.130（eth2）</p>
<p>D：192.168.4.234</blockquote><br />
CentOS里面配置网卡方法就是修改/etc/sysconfig/network-scripts/ifcfg-eth*，没有则自己创建一个。</p>
<p>关键项就是ONBOOT，IPADDR，NETMASK，GATEWAY，DNS1，DNS2，PEERDNS</p>
<p>&nbsp;</p>
<p>要注意的是，有PEERDNS项，当它值为yes，则会把DNS1和DNS2覆盖地写入/etc/resolv.conf。</p>
<p>这对于多网卡的C，如果ifcfg-eth0、ifcfg-eth1、ifcfg-eth2都设了PEERDNS，由于开机是按名字的顺序执行，则会把ifcfg-eth2的DNS写入/etc/resolv.conf，前两个文件的DNS会无效了的。所以我只在ifcfg-eth0配置PEERDNS=“yes“。</p>
<p>&nbsp;</p>
<p>好，初步网络环境配置完成。</p>
<p>现在情况是：<br />
<ul><br />
	<li>ABD都不能互访，因为在不同的网段</li><br />
	<li>C则都能跟它们三个互访</li></p>
</ul>
<p>&nbsp;</p>
<p>&nbsp;<br />
<h6><strong>4、配置网关C的iptables，实现NAT</strong></h6><br />
到关键也是好玩的地方了。</p>
<p>接下来配置网关C的iptables，实现不同网络间地址的转换（NAT）。</p>
<p>iptables内容比较多，详细可以参考：<a title="http://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html" href="http://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html">http://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html</a></p>
<p>&nbsp;</p>
<p><strong>（1）A、B通过C实现通信</strong></p>
<p>这个比较简单，没用到iptables，把A的网关设为C的对应网卡的ip（192.168.149.130），B的网关设为C对应网卡的ip（192.168.214.130）。</p>
<p>然后打开C的ip转发，在C中执行：<br />
<blockquote><span style="color: #222222;">$ echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span></blockquote><br />
这就把C作为了A、B的网关。A、B间通信的数据包会发到C，靠C的网卡间转发来完成通信。AB就可以相互ping通了。</p>
<p>&nbsp;</p>
<p><strong>（2）A、B通过C与外网通信（SNAT）</strong></p>
<p>现在A、B都不能跟D通信，因为现在A、B发到D的数据包源地址（192.168.149.128,192.168.214.128），D是无法知道的（D在C的同一个网络，网关设为相同的ip）。则包可以发到D，但D回复不了，因为它的网关不知道A、B。</p>
<p>现在就通过SNAT把A、B发送的包在经过C时，把源地址改为C的外网ip（192.168.4.233），这个D是知道的，也就可以顺利回复了。</p>
<p>具体在C中执行：<br />
<blockquote><span style="color: #222222;">$ iptables     –t   nat     –A  POSTROUTING     –o  eth0     –j SNAT  -–to-source  192.168.4.233</span></blockquote><br />
这样A、B就能ping通了。</p>
<p>SNAT可以看看<a href="http://www.goorockey.com/2012/03/11/77213">我的博文</a>。(<strong><sup>__</sup></strong>) 嘻嘻……</p>
<p>&nbsp;</p>
<p><strong>（3）D通过C访问A、B的服务（DNAT）</strong></p>
<p>现在A、B可以跟D通信，但D不能主动访问A、B。还是因为D只知道C，不知道A、B。</p>
<p>假如现在A开了19991口的sshd：</p>
<p>在A的/etc/ssh/sshd_config中添加：<br />
<blockquote>ListenAddress 0.0.0.0:19991</blockquote><br />
重启sshd<br />
<blockquote><span style="color: #222222;">$ service sshd restart</span></blockquote><br />
在A中让iptables允许对19991口的访问<br />
<blockquote><span style="color: #222222;">$ iptables     –I   INPUT       -p tcp   &#8212;dport 19991    &#8211; j <span class="caps">ACCEPT</span> </span></blockquote><br />
&nbsp;</p>
<p>现在D想ssh到A的19991，则可以在C中执行以下命令，实现DNAT：<br />
<blockquote><span style="color: #222222;">$ iptables    -t nat   -A   PREROUTING    -p  tcp   &#8212;dport  19991  -j   DNAT   &#8212;to-destination   192.168.149.128</span></blockquote><br />
现在D可以通过ssh到C的19991口来ssh到A了。</p>
<p>&nbsp;</p>
<p>&nbsp;<br />
<h6><strong>5、小结</strong></h6><br />
整个实验搞完，对iptables，NAT的原理还是深刻了不少。</p>
<p>然后，就是VMWare是个好东西。<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77247'>http://goorockey.github.com/blogs/77247</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAT学习总结]]></title>
    <link href="http://goorockey.github.com/blogs/77213"/>
    <updated>2012-03-11T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77213</id>
    <content type="html"><![CDATA[<p>最近要恶补一下计算机网络的基础知识，今天先总结一下NAT。</p>
<p>&nbsp;<br />
<h6><strong>1、NAT的背景</strong></h6><br />
随着Internet的普及，网络中的ip资源是越来越紧张。而NAT就是为了解决这个问题的方案。</p>
<p>NAT是Network Address Translation,网络地址转换，会在网关中实现局域网内部ip和外网ip之间转换。<!--more--><br />
<p style="text-align: center;"><a href="http://www.goorockey.com/uploads/2012/03/nat_1.png"><img class="alignnone  wp-image-77214" title="nat_1" src="http://www.goorockey.com/uploads/2012/03/nat_1.png" alt="" width="303" height="194" /></a></p><br />
如上图，局域网内部网段是192.168.1.X，这些ip只在这个局域网内有意义，外网无法根据这些ip定位计算机。</p>
<p>而NAT就是做内网和外网这样两个网络间的ip转换。</p>
<p>&nbsp;</p>
<p>&nbsp;<br />
<h6><strong>2、NAT的类型</strong></h6><br />
按照通信发起方的不同，NAT可以分为：<br />
<ul><br />
	<li>SNAT，即Source <span class="caps">NAT</span></li><br />
	<li>DNAT，即Destination <span class="caps">NAT</span></li></p>
</ul>
<p>&nbsp;</p>
<p><strong>（1）SNAT</strong></p>
<p>SNAT是对数据包源ip的转换，主要用于内网机子发起连接到外网的情况。</p>
<p>【考虑以下场景】：</p>
<p>内网ip为192.168.1.2的机子向外网的8.8.8.8发包。如果数据包的源ip直接就是192.168.1.2，数据包虽然可以成功到达8.8.8.8，但是它无法根据192.168.1.2的源ip回复数据包，因为在外网中没有192.168.1.2，则造成通信失败。</p>
<p>而SNAT就是当内网发起连接到外网时，具有NAT功能的机子，例如网关，在数据包要出外网之前，把包的源ip改为这个局域网的外网ip，如1.1.1.1，同时会有映射表记录转换。</p>
<p>由于1.1.1.1是外网中有意义的ip，1.1.1.1和8.8.8.8可以成功的完成数据包的发送和接受。这时8.8.8.8是把1.1.1.1作为目标ip回复数据包，网关收到数据包后，会查表把包的目标ip映射回内网机子ip 192.168.1.2。</p>
<p>可以看出来，整个过程对内网机子是透明的，即发送和接受数据包的ip都对应，仿佛没有做过转换。</p>
<p>&nbsp;</p>
<p><strong>（2）DNAT</strong></p>
<p>DNAT是对数据包目标ip的转换，主要用于外网向内网发起连接的情况。</p>
<p>【考虑一下场景】：</p>
<p>在内网中有很多机子，其中有一台ip为192.168.1.2的机子是对外网提供服务的web服务器，现在外网的8.8.8.8要访问它。但对于8.8.8.8来说，web服务器所在ip会是192.168.1.2所在内网的外网ip，如1.1.1.1。</p>
<p>可想而知，当8.8.8.8向1.1.1.1发送数据包，网关会做DNAT，把包的目标ip从1.1.1.1改为192.168.1.2，同时会把转换记录到一个表中。然后192.168.1.2回复数据包，包的源ip是192.168.1.2，目标ip会是8.8.8.8。网关接受到包后，则查表，把源ip修改回1.1.1.1。</p>
<p>&nbsp;</p>
<p>&nbsp;<br />
<h6><strong>3、NAT的转换方式</strong></h6><br />
NAT有四种转换方式：<br />
<ul><br />
	<li>静态NAT  (Static <span class="caps">NAT</span>)</li><br />
	<li>动态NAT  (Dynamic <span class="caps">NAT</span>)</li><br />
	<li>过载        (Overload <span class="caps">NAT</span>)</li><br />
	<li>重叠        (Overlap <span class="caps">NAT</span>)</li></p>
</ul>
<p><strong>（1）Static <span class="caps">NAT</span></strong></p>
<p><a href="http://www.goorockey.com/uploads/2012/03/nat-static.jpg"><img class="wp-image-77216 aligncenter" title="nat-static" src="http://www.goorockey.com/uploads/2012/03/nat-static.jpg" alt="" width="317" height="102" /></a></p>
<p>局域网有多个外网ip，数量等于或多于内网ip数。</p>
<p>则做NAT转换时，每个内网ip对应一个外网ip。</p>
<p>网关的表中记录着这样一对一的关系。</p>
<p>&nbsp;</p>
<p><strong>（2）Dynamic <span class="caps">NAT</span></strong></p>
<p><a href="http://www.goorockey.com/uploads/2012/03/nat-dynamic.jpg"><img class="wp-image-77217 aligncenter" title="nat-dynamic" src="http://www.goorockey.com/uploads/2012/03/nat-dynamic.jpg" alt="" width="331" height="147" /></a></p>
<p>局域网有多个外网ip，但数量少于内网ip数。</p>
<p>则做转换时，每个内网ip从当前未被映射的外网ip选取一个来做转换。</p>
<p>网关的表也会记录这种转换，且会根据情况不断更新。</p>
<p>&nbsp;</p>
<p><strong>（3）Overload <span class="caps">NAT</span></strong></p>
<p><a href="http://www.goorockey.com/uploads/2012/03/nat-overload.jpg"><img class="wp-image-77218 aligncenter" title="nat-overload" src="http://www.goorockey.com/uploads/2012/03/nat-overload.jpg" alt="" width="360" height="117" /></a></p>
<p>如果局域网只有一个外网ip，每个内网ip都映射到这个外网ip，但端口口会不同。</p>
<p>网关的表中会记录这种端口的映射。</p>
<p>&nbsp;</p>
<p><strong>（4）Overlap <span class="caps">NAT</span></strong></p>
<p><a href="http://www.goorockey.com/uploads/2012/03/nat-overlap.jpg"><img class="wp-image-77220 aligncenter" title="nat-overlap" src="http://www.goorockey.com/uploads/2012/03/nat-overlap.jpg" alt="" width="360" height="126" /></a></p>
<p>当内网的ip在外网中已经注册且已被其他机子使用时，网关要在选择一个外网中已注册但未被使用的ip做转换。</p>
<p>网关的表中记录这种转化。</p>
<p>&nbsp;</p>
<p>&nbsp;<br />
<h6><strong>4、小结</strong></h6><br />
其实所谓的内网和外网都是相对而言，只要是两个网络间的通信，都可以或需要用网关或路由做NAT。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>【参考资料】：<br />
<ul><br />
	<li><span><a class="smarterwiki-linkify" href="http://article.yeeyan.org/view/185403/150856">http://article.yeeyan.org/view/185403/150856</a></span></li><br />
	<li><span><a class="smarterwiki-linkify" href="http://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">http://zh.wikipedia.org/wiki/网络地址转换</a></span></li></p>
</ul>
<p>&nbsp;</p>
<p>&nbsp;<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77213'>http://goorockey.github.com/blogs/77213</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再次用linux做宿主系统]]></title>
    <link href="http://goorockey.github.com/blogs/77180"/>
    <updated>2012-02-29T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77180</id>
    <content type="html"><![CDATA[<h3><strong>1、背景</strong></h3>
<p>之前就试过几次想把linux作为宿主来玩，但都因为舍弃不了一些windows下的软件而放弃了，例如wiz，qq等都是我常用的软件。试过wine，但总是有点错误，不完美。</p>
<p>最近也在微博上收集意见，发现用linux做宿主系统的人还是蛮多的。其实仔细想想，归根结底还是自己linux的操作还不熟练。</p>
<p>还好最近一段时间自己多了在linux的工作，这几天又下定决心一次装了linux做宿主来玩了。然后就想写个blog记录一下。</p>
<p><!--more--><br />
<h3><strong>2、系统</strong></h3><br />
这次选的linux的linux mint(64bit)，一个基于ubuntu的linux发行版。</p>
<p>官方说其目标是成为有windows那样市场占有率的linux发行版。</p>
<p>我不大喜欢ubuntu现在的natty，所以就在虚拟机试用了一下linux mint，感觉比ubuntu方便。</p>
<p>&nbsp;<br />
<h3><strong>3、工具</strong></h3><br />
<ul><br />
	<li>浏览器：firefox。一直用firefox，插件强大。</li><br />
	<li>知识管理：evernote。本地用nevernote，它是evernote的linux版；网页摘取用firefox的evernote clip。</li><br />
	<li>X windows:awesome。一种平铺窗口管理器。本来想用musca，但我没编译成功。唉~~</li><br />
	<li>BT下载：utorrent。utorrent有linux版，但是web gui版。</li><br />
	<li>虚拟机：virtualbox。在virtualbox装了xp，感觉比vmware快多了。。</li></p>
</ul>
<p>&nbsp;<br />
<h3><strong>4、日常应用</strong></h3><br />
（1）网络管理</p>
<p>ubuntu(包括linux mint)现在都是默认用NetworkManager来管理网络。我用了几次都不适应。这次立刻就把它卸载了，直接用脚本来管理网络。卸载命令：<br />
<blockquote>$ sudo apt-get &#8212;purge remove network-manager</p>
<p>$ sudo apt-get &#8212;purge remove network-manager-gnome</blockquote><br />
然后就直接对/etc/network/interfaces和/etc/resolv.conf做修改，来配置网络了。</p>
<p>&nbsp;</p>
<p>（2）ADSL连接</p>
<p>寝室是用电信上网，如果不用路由拨号，就要自己电脑直接连到网口，自己拨号。</p>
<p>配置命令：<br />
<blockquote>$ sudo pppoeconf</blockquote><br />
在弹出的窗口中输入帐号和密码，注意之后有个提示选择是否开机时就自动拨号，如果不时总是直接连网口的，就不选吧。</p>
<p>配置完回到命令行，输入拨号命令就可以上网了：<br />
<blockquote>$ sudo pon dsl-provider</blockquote><br />
断开链接的命令则是：<br />
<blockquote>$ sudo pppoe-stop</blockquote><br />
&nbsp;</p>
<p>（3）连wifi<br />
<blockquote><span><a class="smarterwiki-linkify" href="http://www.jiangmiao.org/blog/1781.html">http://www.jiangmiao.org/blog/1781.html</a></span></blockquote><br />
&nbsp;</p>
<p>（4）做AP，共享wifi<br />
<blockquote><span><a class="smarterwiki-linkify" href="http://blog.csdn.net/feifei454498130/article/details/6642140">http://blog.csdn.net/feifei454498130/article/details/6642140</a></span></blockquote><br />
&nbsp;</p>
<p>（5）截图<br />
<blockquote>$ scrot -bst [file]</blockquote><br />
然后用鼠标框主目标即可。如果没有制定输出文件路径file，默认输出到用户主目录，并以时间命名。</p>
<p>&nbsp;</p>
<p>路漫漫其修远兮，吾将上下而求索~~~</p>
<p>O(&gt;0&lt;)O</p>
<p>&nbsp;</p>
<p>2012.7.12 更新</p>
<p>找到一篇介绍自己只使用命令行经验的博文，好正点！</p>
<p>http://blog.chavezgu.com/2012/03/07/the-command-line-challenge/</p>
<p>赞同里面循序渐进脱离GUI的方法；<br />
<ul><br />
	<li>坚持一天只使用命令行！</li><br />
	<li>坚持一周！！</li><br />
	<li>坚持一个月！！！</li><br />
	<li>坚持半年！！！！</li></p>
</ul>
<p>呵呵～～</p>
<p>&nbsp;<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77180'>http://goorockey.github.com/blogs/77180</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH端口转发]]></title>
    <link href="http://goorockey.github.com/blogs/77141"/>
    <updated>2012-02-22T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77141</id>
    <content type="html"><![CDATA[<h4><strong>1、ssh端口转发是什么</strong></h4>
<p>ssh端口转发也被叫ssh隧道，ssh代理。</p>
<p>所谓隧道，就是用X协议封装Y协议的数据包，靠X协议来进行Y协议通信。</p>
<p>总的来说ssh隧道提供了两个好处：<br />
<ul><br />
	<li>突破防火墙等，进行受限协议的通信。</li><br />
	<li>使如telnet等不安全的协议传输经过ssh的加密通道，提高安全性。</li></p>
</ul>
<p><!--more--><br />
<h4><strong>2、三种ssh端口转发</strong></h4><br />
ssh端口转发有三种：<br />
<ul><br />
	<li>本地转发</li><br />
	<li>远程转发</li><br />
	<li>动态转发</li></p>
</ul>
<p>&nbsp;<br />
<h6>(1) 本地转发</h6><br />
命令是：<br />
<blockquote><span style="color: #222222;">$ ssh –L &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;ssh host&gt;</span></blockquote><br />
考虑这样的场景：</p>
<p><a href="http://www.goorockey.com/uploads/2012/02/image002.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image002" src="http://www.goorockey.com/uploads/2012/02/image002_thumb.jpg" alt="image002" width="410" height="287" border="0" /></a></p>
<p>一个运行在服务器116.1.1.1的程序提供端口389的数据通信，但防火墙只允许其他计算机对服务器做ssh的通信。</p>
<p>而客户端116.4.0.1为了完成通信，可以借助ssh的本地端口转发。</p>
<p>在客户端执行：<br />
<blockquote><span style="color: #222222;">$ ssh –L  7001:localhost:389     116.1.1.1</span></blockquote><br />
同时把客户端程序输出到本机的7001端口。注意命令中的localhost是相对于116.1.1.1来说的。</p>
<p>那么整个数据流会是：<br />
<ul><br />
	<li>客户端程序到数据输出到客户端的7001口</li><br />
	<li>客户端的ssh一直检测7001口，但发现本机有数据包到达，则把数据包加密，并通过跟服务端116.1.1.1的ssh通路传输</li><br />
	<li>服务端的sshd收到数据包后包解密，并转发到服务端的389口</li><br />
	<li>服务端返回数据，并原路返回</li></p>
</ul>
<p>&nbsp;</p>
<p>另外，在ssh本地转发命令中的remote host可以使任意的机子，包括本机或其他计算机。</p>
<p>例如，考虑这样的场景，用本地转发来进行远程桌面：</p>
<p><a href="http://www.goorockey.com/uploads/2012/02/image.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" src="http://www.goorockey.com/uploads/2012/02/image_thumb.png" alt="image" width="244" height="202" border="0" /></a></p>
<p>现在要在机子A对机子C做远程桌面。但机子A和机子C都在不同的子网，不能直接通信，也都只能跟机子B用ssh通信。</p>
<p>然后已知windows远程桌面的服务端端口是3389，这我们可以在机子A执行：<br />
<blockquote><span style="color: #222222;">$ssh –L   13389:&lt;C hostname&gt;:3389     &lt;B hostname&gt;</span></blockquote><br />
命令中的13389是任意的，但要注意只有管理员才能用1~1024的端口。</p>
<p>然后在A机子执行yuan远程桌面：<br />
<blockquote><span style="color: #222222;">mstsc /v:13389</span></blockquote><br />
就能在A机子远程桌面控制C机子了。</p>
<p>&nbsp;<br />
<h6>(2) 远程转发</h6><br />
其实远程转发跟本地转发是基本相同的。</p>
<p>命令是：<br />
<blockquote><span style="color: #222222;">$ ssh –R  &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt;    &lt;ssh host&gt;</span></blockquote><br />
考虑这样的场景：</p>
<p><a href="http://www.goorockey.com/uploads/2012/02/image003.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image003" src="http://www.goorockey.com/uploads/2012/02/image003_thumb.jpg" alt="image003" width="383" height="258" border="0" /></a></p>
<p>客户端A和服务端B的端口都还是7001和389。</p>
<p>跟本地转发时候不同的是，ssh连接的sshd在客户端A，ssh在服务端B。</p>
<p>所以，远程转发可以应用在客户端A只允许对其做ssh连接的时候。</p>
<p>如果客户端和服务端都允许ssh连接，那选择本地转发还是远程转发都可以。</p>
<p>&nbsp;<br />
<h6>(3) 动态转发</h6><br />
命令是：<br />
<blockquote><span style="color: #222222;">$ ssh –D &lt;local port&gt;  &lt;ssh host&gt;</span></blockquote><br />
<a href="http://www.goorockey.com/uploads/2012/02/image005.jpg"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image005" src="http://www.goorockey.com/uploads/2012/02/image005_thumb.jpg" alt="image005" width="345" height="226" border="0" /></a></p>
<p>跟其他两种端口转发不同的是，动态转发在数据包经过ssh通过到达服务端后，sshd会根据把封装数据包的协议，转发到对应的主机和端口。</p>
<p>这时候ssh隧道是充当了SOCKS代理的作用。这就可以用来翻X之类了。</p>
<p>&nbsp;<br />
<h4><strong>3、Ending</strong></h4><br />
总的来说，ssh是个好东西~~~</p>
<p>&nbsp;</p>
<p>&nbsp;<br />
<h4><strong>相关资料</strong>：</h4><br />
<ul><br />
	<li><a title="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/" href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/">https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/</a></li><br />
	<li><a title="http://lesca.me/blog/2011/03/01/ssh-port-forwarding-priciple-and-praticle-application/" href="http://lesca.me/blog/2011/03/01/ssh-port-forwarding-priciple-and-praticle-application/">http://lesca.me/blog/2011/03/01/ssh-port-forwarding-priciple-and-praticle-application/</a></li></p>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77141'>http://goorockey.github.com/blogs/77141</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在dotcloud上搭建wordpress]]></title>
    <link href="http://goorockey.github.com/blogs/77117"/>
    <updated>2012-02-07T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77117</id>
    <content type="html"><![CDATA[<p>之前在sourceforge搭建了wordpress，但SF有两点不好：<br />
<ul><br />
	<li>SF在防火墙禁止了对外连接，使得WP好多功能、插件都无法使用（如Akismet）</li><br />
	<li>访问SF速度很慢很慢</li></p>
</ul>
<p>之后在寻找更好的方案时，偶遇dotcloud上搭建wordpress的文章，还看到了借dotcloud的ssh来翻x哦。</p>
<p><!--more--></p>
<p>1、dotcloud介绍</p>
<p>dotcloud是PaaS(Platform as a Service)的云计算平台，类似的还有GAE、Heroku、国内的SAE。</p>
<p>dotcloud支持几乎所有主流服务，php、java、python、ruby、mysql、postsql、node.js、Hadoop等等。详细参见：<a title="http://docs.dotcloud.com/firststeps/platform-overview/" href="http://docs.dotcloud.com/firststeps/platform-overview/">http://docs.dotcloud.com/firststeps/platform-overview/</a></p>
<p>dotcloud对搭建的应用没有空间和流量限制，但现在有两个限制：<br />
<ul><br />
	<li>每个用户只能有两个应用（每个用户对应一个邮箱，有多个邮箱就可以多申请几个了嘛，呵呵）</li><br />
	<li>网上流传数据库容量限制在10M（官网上没找到这个说法）</li></p>
</ul>
<p>dotcloud的访问速度还是很快的。</p>
<p><br clear="all" />
2、dotcloud使用</p>
<p>搭建wordpress的话，网上资源很多，我主要是参考：</p>
<p><a title="http://blog.yangtse.me/2011/10/wordpress-dotcloud/" href="http://blog.yangtse.me/2011/10/wordpress-dotcloud/">http://blog.yangtse.me/2011/10/wordpress-dotcloud/</a></p>
<p><a title="http://olddocs.dotcloud.com/tutorials/wordpress/" href="http://olddocs.dotcloud.com/tutorials/wordpress/">http://olddocs.dotcloud.com/tutorials/wordpress/</a></p>
<p>反正算蛮简单的。</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000; font-size: large;">建议：</span></p>
<p>不要用postinstall脚本连接的方法。由于dotcloud的push，是把原有的全部删除，重新建立一份，这个脚本是把wp-content移出current目录，防止push后把wp-content覆盖了。</p>
<p>但由于wordpress的bug（其他应用不确定），一些插件会出现路径的错误。例子可见：<a title="http://blog.yangtse.me/2011/10/wordpress-dotcloud-habari-error/" href="http://blog.yangtse.me/2011/10/wordpress-dotcloud-habari-error/">http://blog.yangtse.me/2011/10/wordpress-dotcloud-habari-error/</a>。</p>
<p>dotcloud的push我除了第一次上传代码用过，之后都是直接用ssh控制的。所以我就干脆不用postinstall脚本了。<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77117'>http://goorockey.github.com/blogs/77117</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Swarm]]></title>
    <link href="http://goorockey.github.com/blogs/77106"/>
    <updated>2012-02-03T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77106</id>
    <content type="html"><![CDATA[<p>今天拿自己项目组svn的日志来小玩了一下code swarm。</p>
<p>&nbsp;</p>
<p>1、什么是code swarm?</p>
<p>code swarm是可以把svn、cvs、git等代码管理系统的日志，以可视化的形式展现的项目。</p>
<p>swarm是蜂群的意思，code swarm会以蜂群的形式表示每个人上传的文件。</p>
<p><!--more--></p>
<p>很多大的项目，如Apache、Python、豆瓣等，都做了自己的code swarm。<br />
<blockquote><span style="color: #222222;">Apache、Python等：<a title="http://www.michaelogawa.com/code_swarm/" href="http://www.michaelogawa.com/code_swarm/">http://www.michaelogawa.com/code_swarm/</a></span></p>
<p><span style="color: #222222;">豆瓣：<a title="http://v.youku.com/v_show/id_XMzQzNDc4MDk2.html" href="http://v.youku.com/v_show/id_XMzQzNDc4MDk2.html">http://v.youku.com/v_show/id_XMzQzNDc4MDk2.html</a></span></blockquote><br />
我个人感觉，看别人的code swarm没什么特别的感受，只有看自己项目的才有感觉，呵呵。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>2、使用 code swarm</p>
<p>可以从它google code 的主页中下载代码：<a title="http://code.google.com/p/codeswarm/downloads/list" href="http://code.google.com/p/codeswarm/downloads/list">http://code.google.com/p/codeswarm/downloads/list</a></p>
<p>我参照别人博客，使用了code swarm别的fork：<a title="https://github.com/rictic/code_swarm" href="https://github.com/rictic/code_swarm">https://github.com/rictic/code_swarm</a>，它可以显示每个人的头像。</p>
<p>根据wiki或下载包内的README，使用code swarm，要先安装java和ant。</p>
<p>&nbsp;</p>
<p>code swarm有可以通过run.bat或者runrepositoryfetch.bat来启动：run.bat需要我们手工把svn等软件的日志转为code swarm所需的xml，而runrepositoryfetch.bat可以输入reposition url，让code swarm自动下载日志并转换。</p>
<p>我选择简单的runrepositoryfetch.bat方式。</p>
<p>在命令行提示中选择配置文件后，code swarm就能呈现了，但还可以修改配置来达到自己的效果。</p>
<p>&nbsp;</p>
<p>3、配置code swarm</p>
<p>我觉得关键的配置：<br />
<ul><br />
	<li><em><strong>InputFile</strong></em>：code swarm所需的xml文件</li><br />
	<li><strong><em>TakeSnapshots</em></strong>：是否保存每一帧图片。code swarm不能直接输出视频，只能输出每一帧图片。所以我们要导出视频的话，需要自行把每一帧图片转换为视频。</li><br />
	<li><strong><em>SnapshotLocation</em></strong>：保存输出图片的目录</li></p>
</ul>
<p>&nbsp;</p>
<p>还有一些控制帧速度，显示项等等的配置。</p>
<p>&nbsp;</p>
<p>以下是fork中才有的配置：<br />
<ul><br />
	<li><em><strong>AvatarFetcher</strong></em>：每个人使用头像的来源。可以是NoAvatar（没有头像），GravatarFetcher（程序自己生成），LocalAvatar（提供本地目录，使用跟commiter id对应的头像）。</li><br />
	<li><strong><em>LocalAvatarDirectory</em></strong>：LocalAvatar方式时，存放头像的目录，目录里如果有文件名与commiter id相同的图片，则使用该图片否则使用默认头像。如果没有默认头像，则程序会中断。</li><br />
	<li><strong><em>LocalAvatarDefaultPic</em></strong>：默认头像</li><br />
	<li><strong><em>AvatarSize</em></strong>：选择LocalAvatar方式时，每张头像的高或宽。这里要求每张头像图片的尺寸相同，且一定是正方形。</li><br />
	<li><strong><em>CircularAvatars</em></strong>：用圆形截取头像图片，这会用到程序代码src下的mask.png图片，这里也要注意修改AvatarSize后，mask.png的尺寸也要改变，否则程序中断。</li></p>
</ul>
<p>&nbsp;</p>
<p>4、把code swarm的图片合成为视频</p>
<p>方法很多，抱着学习的心态，我试着按wiki的方法用mencoder。</p>
<p>我要加背景音乐，所以加了参数-audiofile：<br />
<blockquote>mencoder mf://*.png -mf fps=33:type=png -ovc lavc -oac copy –audiofile bg.mp3 -o my.avi</blockquote><br />
这里可以通过修改fps的值来控制生成视频的帧速度。</p>
<p>还可以用mencoder添加字幕，这个我就没做了。</p>
<p>&nbsp;</p>
<p>我的视频：<a href="http://v.youku.com/v_show/id_XMzQ4NjA5ODYw.html">http://v.youku.com/v_show/id_XMzQ4NjA5ODYw.html</a></p>
<p>&nbsp;</p>
<p>P.S.相关资料</p>
<p>【code swarm wiki】 ：<a href="http://code.google.com/p/codeswarm/wiki/GeneratingAVideo">http://code.google.com/p/codeswarm/wiki/GeneratingAVideo</a></p>
<p>【fork of code swarm】：<a href="https://github.com/rictic/code_swarm">https://github.com/rictic/code_swarm</a></p>
<p>【制作code swarm】：<a href="http://blog.xupeng.me/2012/01/12/code-swarm/">http://blog.xupeng.me/2012/01/12/code-swarm/</a></p>
<p>【用mencoder把多张图片合成为视频】：<a href="http://www.mplayerhq.hu/DOCS/HTML/en/menc-feat-enc-images.html">http://www.mplayerhq.hu/<span class="caps">DOCS</span>/<span class="caps">HTML</span>/en/menc-feat-enc-images.html</a></p>
<p>【使用mencoder】：<a href="http://hi.baidu.com/creatives/blog/item/41f6c32ad06cdb2bd42af128.html">http://hi.baidu.com/creatives/blog/item/41f6c32ad06cdb2bd42af128.html</a></p>
<p>【windows下安装mencoder】：<a href="http://hi.baidu.com/%D7%AF%D7%D3%C8%E7%CA%C7%CB%B5/blog/item/611a28b11abebd5f0823021b.html">http://hi.baidu.com/%D7%AF%D7%D3%C8%E7%CA%C7%CB%B5/blog/item/611a28b11abebd5f0823021b.html</a><br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77106'>http://goorockey.github.com/blogs/77106</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客转移了（改用sourceforge+wordpress）]]></title>
    <link href="http://goorockey.github.com/blogs/77069"/>
    <updated>2012-01-28T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/77069</id>
    <content type="html"><![CDATA[<p>这几天把博客从GAE+micolog转到了sourceforge+wordpress，主要是考虑到：<br />
<ul><br />
	<li>服务器：GAE现在对流量加大了限制，而sourceforge是没有流量或空间限制的</li><br />
	<li>博客系统：wordpress的资源币micolog的要多很多</li></p>
</ul>
<p>主要做了几件事：<br />
<ul><br />
	<li>sourceforge+wordpress建站</li><br />
	<li>micolog数据导入到wordpress</li><br />
	<li>优化wordpress：主题、插件、google analytics</li></p>
</ul>
<p><!--more--></p>
<p>考虑到SEO的域名权重问题，就保留sourceforge的二级域名了。</p>
<p>&nbsp;</p>
<p>教程的话网上资源很多，值得记录的东西：<br />
<ul><br />
	<li>安装wordpress，及其主题、插件等资源时，最好用ssh登录到sourceforge，从sourceforge那边wget下载，而不要从自己机子下载。因为资源多在国外的服务器，这样速度快多了。</li><br />
	<li>注意关闭sourceforge项目管理中不必要的访问权限，以免博客里的文件被在sourceforge中能被访问。</li></p>
</ul>
<p>&nbsp;</p>
<p>感叹sourceforge真是太伟大了！</p>
<p>感叹wordpress真的就两个字：折腾！！</p>
<p>&nbsp;</p>
<hr />
<p><strong><span style="color: #ff0000;">2012.1.29 更新：</span></strong></p>
<p>昨天还发现github+octopress这种免费建博客的形式。</p>
<p>但建的是静态站点，即服务器存放的就只是html+css+js网页,没有php、asp等。</p>
<p>优点：<br />
<ul><br />
	<li>最重要的优点是git的分布式管理，保证博文等数据不容易丢失；</li><br />
	<li>git的其他各种优点</li><br />
	<li>静态站点的优点：响应速度快，对服务器端的负荷小</li></p>
</ul>
<p>缺点:<br />
<ul><br />
	<li>我觉得缺点主要是静态站点的后期维护成本高！  因为到了后期，文章等数据多了，服务器就会存有大量网页，大大增加修改、备份等维护的成本！！</li><br />
	<li>折腾octopress的成本。octopress的官网说其是&quot;a blog framework for *HACKERS*&quot;，本身是ruby应用，即折腾它要玩ruby。要折腾octopress似乎比较适合程序猿。（ruby折腾迷略过此条。。）</li></p>
</ul>
<p>&nbsp;</p>
<p>考虑到静态站点的后期维护问题，我觉得还是SF+WP比较适合现在的我啦~~嘻嘻</p>
<hr />
<p><strong><span style="color: #ff0000;">2012.2.5 更新：</span></strong></p>
<p>根据SF的官方规定，架在上面的服务的outbound connection会被禁止。详细请参看：</p>
<p><span><a class="smarterwiki-linkify" href="http://sourceforge.net/apps/trac/sourceforge/wiki/Project%20web%20and%20developer%20web%20platform#Outboundconnectivity">http://sourceforge.net/apps/trac/sourceforge/wiki/Project%20web%20and%20developer%20web%20platform#Outboundconnectivity</a></span></p>
<p>而因为很多WP的功能、插件等都会用到向外发送请求，所以在SF上架WP的时候，很多功能和插件都用不了的。</p>
<p>例如，WP内置的更新ping服务器，Akismet， google sitemap，微博同步等等。。</p>
<p>现在还没找到什么办法，唉。。<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/77069'>http://goorockey.github.com/blogs/77069</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache和Tomcat]]></title>
    <link href="http://goorockey.github.com/blogs/62001"/>
    <updated>2011-11-22T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/62001</id>
    <content type="html"><![CDATA[<p>调研了一下Apache和Tomcat：</p>
<p>1、apache 只是一个web服务器，负责响应客户端的请求。</p>
<p>2、apache对于页面请求：<!--more--></p>
<p>如果是静态页面请求，会立刻返回相应的页面；</p>
<p>如果是动态页面请求，apache会根据httpd.conf中AddType的配置，把请求提交给合适的动态脚本解析程序来处理，处理后生成的静态页面返回给apache，再返回给客户端。所以在配置php和jsp这样的环境的时候，都要在httd.conf中添加对应的AddTpye语句。</p>
<p>3、tomcat侧重于是一个Servlet/JSP的容器，但也能可以独立于apache运行，响应html请求</p>
<p>4、tomcat响应静态页面较apache要慢</p>
<p>5、整合apache和tomcat可以有三种方法:JK,http_proxy,ajp_proxy</p>
<p>具体介绍见：<a href="http://www.ibm.com/developerworks/cn/opensource/os-lo-apache-tomcat/">http://www.ibm.com/developerworks/cn/opensource/os-lo-apache-tomcat/</a></p>
<p>JK较老，相对比较稳定，配置比较麻烦</p>
<p>两种proxy模式原理都是让apache做tomcat的代理，配置简单<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/62001'>http://goorockey.github.com/blogs/62001</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS下安装Apache+php+mysql Tomcat]]></title>
    <link href="http://goorockey.github.com/blogs/60002"/>
    <updated>2011-11-12T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/60002</id>
    <content type="html"><![CDATA[<p><strong><span style="color: #ff0000; font-size: medium;">一、安装及配置Apache+php+mysql</span></strong></p>
<p><strong><span style="color: #9bbb59;">1、 安装Apache+php+mysql</span></strong></p>
<p>(1) 安装Apache+php+Mysql，php连接mysql的组件<br />
<blockquote>yum -y install httpd php mysql mysql-server php-mysql</blockquote><br />
(2) 安装mysql扩展<br />
<blockquote>yum -y install mysql-connector-odbc mysql-devel libdbi-dbd-mysql</blockquote><br />
(3) 安装php的扩展<br />
<blockquote>yum -y install php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc</blockquote><br />
(4) 安装apache扩展<br />
<blockquote>yum -y install httpd-manual mod_ssl mod_perl mod_auth_mysql</blockquote></p>
<p><!--more--></p>
<p>或者一次性粘贴安装:<br />
<blockquote>yum -y install httpd php mysql mysql-server php-mysql httpd-manual mod_ssl mod_perl mod_auth_mysql php-mcrypt php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc mysql-connector-odbc mysql-devel libdbi-dbd-mysql</blockquote><br />
<span style="color: #80ff00;"><strong> </strong></span></p>
<p><strong><span style="color: #9bbb59;">2、配置Apache+php+mysql</span></strong><br />
<table width="502" border="0" cellspacing="0" cellpadding="2"><br />
<tbody><br />
<tr><br />
<td valign="top" width="223">设置apache为自启动</td><br />
<td valign="top" width="277">chkconfig httpd on</td></p>
</tr>
<tr>
<td valign="top" width="223">mysql服务</td>
<td valign="top" width="277">chkconfig –-add mysqld</td>
</tr>
<tr>
<td valign="top" width="223">mysqld服务</td>
<td valign="top" width="277">chkconfig mysqld on</td>
</tr>
<tr>
<td valign="top" width="223">自启动 httpd 服务</td>
<td valign="top" width="277">service httpd start</td>
</tr>
<tr>
<td valign="top" width="223">自启动mysqld服务</td>
<td valign="top" width="277">service mysqld start</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><span style="color: #ff0000; font-size: medium;"><strong>二、安装和配置Tomcat：</strong></span></p>
<p><strong><span style="color: #9bbb59;">1、安装JDK：</span></strong></p>
<p>为了默认使用Sun的javac作为Java的编译器，首先删除CentOS系统默认的Java编译器&#8212;gcj。</p>
<p>（1）查看:<br />
<blockquote>[root@localhost ~ ]#rpm –qa |grep gcj</p>
<p>java-1.5.0-gcj-1.5.0.0-29.1.el6.i686</p>
<p>libgcj-4.4.4-13.el6.i686</blockquote><br />
（2）卸载<br />
<blockquote>[root@localhost ~ ]#rpm –e java-1.5.0-gcj-1.5.0.0-29.1.el6.i686 &#8212;nodeps</p>
<p>[root@localhost ~ ]#rpm –e libgcj-4.4.4-13.el6.i686 &#8212;nodeps</blockquote><br />
（3）检测<br />
<blockquote>[root@localhost ~]# java &#8212;version</blockquote><br />
会出现-bash: /usr/bin/java: No such file or directory</p>
<p>表示卸载成功</p>
<p>（4）安装jdk</p>
<p>从Jdk官网下载安装包，如：</p>
<p>jdk-6u27-linux-i586-rpm.bin<br />
<blockquote>P.S.</p>
<p>由于我的CentOS没有图形界面，下载不方便，</p>
<p>我是先在Windows上访问JDK官网下载安装包，</p>
<p>然后再用Winscp传到CentOS的</blockquote><br />
&nbsp;</p>
<p>比如安装包保存在/opt/tmp</p>
<p>跳到该目录添加可执行的权限，并执行<br />
<blockquote>chmod 777 jdk-6u27-linux-i586-rpm.bin</p>
<p>./jdk-6u27-linux-i586-rpm.bin</blockquote><br />
（5）添加环境变量</p>
<p>vi /etc/profile</p>
<p>添加以下内容：<br />
<blockquote>export JAVA_HOME=/usr/java/jdk1.6.0_27</p>
<p>export JAVA_BIN=/usr/java/jdk1.6.0_27/bin</p>
<p>export <span class="caps">PATH</span>=$<span class="caps">PATH</span>:$JAVA_HOME/bin</p>
<p>export <span class="caps">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</blockquote><br />
保存后，执行java -version 如果有类似以下显示，则表示安装成功：</p>
<p>java version &#8220;1.6.0_27&#8221;</p>
<p>&nbsp;</p>
<p><strong><span style="color: #9bbb59;">2、安装Tomcat：</span></strong></p>
<p>（1）从Tomcat官网下载 安装包，如：</p>
<p>apache-tomcat-7.0.22.tar.gz</p>
<p>（2）把该压缩包拷贝到/usr/local<br />
<blockquote>cp apache-tomcat-7.0.22.tar.gz /usr/local</blockquote><br />
（3）跳转到/usr/local，并解压压缩包<br />
<blockquote>cd /usr/local</p>
<p>tar -zxvf apache-tomcat-7.0.22.tar.gz</blockquote><br />
（4）把解压出来的目录改名为tomcat,并删除拷贝过来的压缩包<br />
<blockquote>rm apache-tomcat-7.0.22 tomcat</blockquote><br />
（5）执行/usr/local/tomcat/bin/startup.sh ，自动添加环境变量，</p>
<p>（6）测试</p>
<p>访问<a href="http://localhost:8080">http://localhost:8080</a>，出现tomcat默认页面，则表示tomcat安装成功</p>
<p>&nbsp;</p>
<p><strong><span style="color: #9bbb59;">3、配置Tomcat为开机自启动：</span></strong></p>
<p>（1）添加开机daomon脚本</p>
<p>把/usr/local/tomcat/bin/catalina.sh拷贝到/etc/init.d，并命名为tomcat<br />
<blockquote>cp /usr/local/tomcat/bin/catalina.sh /etc/init.d/tomcat</blockquote><br />
（2）在/etc/init.d/tomcat添加内容：<br />
<blockquote>#!/bin/sh</p>
<p><span style="color: #ff0000;"># chkconfig: 2345 10 90</span></p>
<p><span style="color: #ff0000;"># description:Tomcat service</span></p>
<ol>
	<li>Licensed to the Apache Software Foundation (<span class="caps">ASF</span>) under one or more</li>
</ol>
<p>&nbsp;</p>
<p>……</p>
<p>&nbsp;</p>
<ol>
	<li>$Id: catalina.sh 1073891 2011-02-23 19:23:59Z markt $</li>
</ol>
<ol>
	<li><del>-</del>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</li>
</ol>
<p><span style="color: #ff0000;">CATALINA_HOME=/opt/tomcat </span></p>
<p><span style="color: #ff0000;">JAVA_HOME=/opt/jdk1.6.0_23</span></p>
<p>&nbsp;</p>
<p>……</blockquote><br />
（3）添加tomcat服务<br />
<blockquote>chkconfig &#8212;add tomcat</p>
<p>service tomcat stop</p>
<p>service tomcat start</p>
<p>chkconfig tomcat on</blockquote><br />
&nbsp;</p>
<p>搞定！！<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/60002'>http://goorockey.github.com/blogs/60002</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Windows核心编程》读书笔记3--线程同步]]></title>
    <link href="http://goorockey.github.com/blogs/45011"/>
    <updated>2011-09-05T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/45011</id>
    <content type="html"><![CDATA[<p><span style="color: #9bbb59;">1、原子操作</span></p>
<p>（1）能调用的原子操作：<br />
<blockquote><span class="caps">LONG</span> <span style="color: #ff8080;">InterlockedExchangeAdd</span>(<span class="caps">PLONG</span> plAddend,<span class="caps">LONG</span> Increment);</p>
<p><span class="caps">LONG</span> <span style="color: #ff8080;">InterlockedExchange</span>(<span class="caps">PLONG</span> plTarget, <span class="caps">LONG</span> lValue);</p>
<p><span class="caps">PVOID</span> <span style="color: #ff8080;">InterlockedExchangePointer</span>(PVOID* ppvTarget, <span class="caps">PVOID</span> pvValue);</p>
<p><span class="caps">PVOID</span> <span style="color: #ff8080;">InterlockedCompareExchange</span>(<span class="caps">PLONG</span> plDestination, <span class="caps">LONG</span> lExchange, <span class="caps">LONG</span> lComparand);</p>
<p><span class="caps">PVOID</span> <span style="color: #ff8080;">InterlockedCompareExchangePointer</span>(PVOID* ppvDestination, <span class="caps">PVOID</span> pvExchange, <span class="caps">PVOID</span> pvComparand);</blockquote><br />
<span style="color: #ffff00;"> <!--more--></span></p>
<p><span style="color: #9bbb59;">2、以查询方式同步</span><br />
<div id="codeSnippetWrapper"><br />
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum1" style="color: #606060;"> 1:</span> <span style="color: #0000ff;">volatile</span> <span class="caps">BOOL</span> g_fFinishedCalculation = <span style="color: #0000ff;"><span class="caps">FALSE</span></span>;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum2" style="color: #606060;"> 2:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum3" style="color: #606060;"> 3:</span> <span style="color: #0000ff;">int</span> <span class="caps">WINAPI</span> WinMain(&#8230;)<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum4" style="color: #606060;"> 4:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum5" style="color: #606060;"> 5:</span> CreateThread(&#8230;, RecalcFunc, &#8230;);<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum6" style="color: #606060;"> 6:</span> &#8230;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum7" style="color: #606060;"> 7:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum8" style="color: #606060;"> 8:</span> <span style="color: #008000;">//Wait for the recalculation to complete. </span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum9" style="color: #606060;"> 9:</span> <span style="color: #0000ff;">while</span>(!g_fFinishedCalculation)<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum10" style="color: #606060;"> 10:</span> ;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum11" style="color: #606060;"> 11:</span> &#8230;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum12" style="color: #606060;"> 12:</span> }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum13" style="color: #606060;"> 13:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum14" style="color: #606060;"> 14:</span> <span class="caps">DWORD</span> <span class="caps">WINAPI</span> RecalcFunc(<span class="caps">PVOID</span> pvParam)<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum15" style="color: #606060;"> 15:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum16" style="color: #606060;"> 16:</span> <span style="color: #008000;">//Perform the recalculation. </span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum17" style="color: #606060;"> 17:</span> &#8230;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum18" style="color: #606060;"> 18:</span> g_fFinishedCalculation = <span style="color: #0000ff;"><span class="caps">TRUE</span></span>;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum19" style="color: #606060;"> 19:</span> <span style="color: #0000ff;">return</span>(0);<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum20" style="color: #606060;"> 20:</span> }<br />
&nbsp;</p>
</div>
</div>
<p>（1）查询的线程一直处于可调度状态，浪费CPU时间</p>
<p>（2）如果WinMain的线程优先级比ReclcFunc的线程要高，则g_fFinishedCalculation永远不会被置为TRUE。</p>
<p>&nbsp;</p>
<p><span style="color: #9bbb59;">3、关键代码段Critical_Section</span></p>
<p>（1）使用前调用InitializeCriticalSection进行初始化，使用后用DeleteCriticalSection释放资源</p>
<p>（2）在指向同一个Critical_Section的EnterCriticalSection和LeaveCriticalSection之间的代码，不会被多个线程同时调用</p>
<p>（3）同一个线程多次重入EnterCriticalSection和LeaveCriticalSection之间的代码不会发生死锁。</p>
<p>如下面代码不会有死锁：<br />
<div id="codeSnippetWrapper"><br />
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum1" style="color: #606060;"> 1:</span> <span style="color: #0000ff;">int</span> main(<span style="color: #0000ff;">int</span> argc, <span style="color: #0000ff;">char</span> **argv)<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum2" style="color: #606060;"> 2:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum3" style="color: #606060;"> 3:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum4" style="color: #606060;"> 4:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum5" style="color: #606060;"> 5:</span>     CRITICAL_SECTION cs;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum6" style="color: #606060;"> 6:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum7" style="color: #606060;"> 7:</span>     InitializeCriticalSection(&amp;cs);<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum8" style="color: #606060;"> 8:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum9" style="color: #606060;"> 9:</span>     EnterCriticalSection(&amp;cs);<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum10" style="color: #606060;"> 10:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum11" style="color: #606060;"> 11:</span>     EnterCriticalSection(&amp;cs);<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum12" style="color: #606060;"> 12:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum13" style="color: #606060;"> 13:</span>     <span style="color: #0000ff;">while</span>(1)<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum14" style="color: #606060;"> 14:</span>     {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum15" style="color: #606060;"> 15:</span>         cout &lt;&lt; <span style="color: #006080;">&#8220;testing&#8221;</span> &lt;&lt; endl;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum16" style="color: #606060;"> 16:</span>     }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum17" style="color: #606060;"> 17:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum18" style="color: #606060;"> 18:</span>     LeaveCriticalSection(&amp;cs);<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum19" style="color: #606060;"> 19:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum20" style="color: #606060;"> 20:</span>     LeaveCriticalSection(&amp;cs);<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum21" style="color: #606060;"> 21:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum22" style="color: #606060;"> 22:</span>     <span style="color: #0000ff;">return</span> 0;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span id="lnum23" style="color: #606060;"> 23:</span> }<br />
&nbsp;</p>
</div>
</div>
<p>（4）考虑到线程进入等待状态时，要保护现场，这是非常耗时的。这可以用InitializeCriticalSectionAndSpinCount，它让想进入已被占用的关键代码段的线程先循环判断多次，才进入等待状态。</p>
<p>（5）InitializeCriticalSectionAndSpinCount只对多个CPU起作用，单个CPU不起作用。</p>
<p>（6）SetCriticalSectionSpinCount可以改变循环判断的次数</p>
<p>（7）关键代码段是在用户态实现同步的方法，这样比内核态同步要快，因为不用做用户态和内核态之间的往返（往返一次需要占用x 8 6平台上的大约1 0 0 0个C P U周期）。</p>
<p><span style="color: #ffff00;"> </span></p>
<p><span style="color: #9bbb59;">4、内核对象同步</span></p>
<p>（1）当内核对象是自动设置为有信号时，在所有等待该内核对象的线程中，只会有一个变为可调度，然后该内核对象又自动设为无信号。</p>
<p>（2）当内核对象是手动设置为有信号时，除非手动设置该内核对象的状态，否则一直是有信号，这样所有等待该内核对象的线程都能变为可调度。</p>
<p>&nbsp;</p>
<p><span style="color: #9bbb59;">5、WaitableTimer</span></p>
<p>（1）WaitableTimer能在规定时候或按规定的时间间隔变为有信号状态，就类似闹钟。</p>
<p>（2）SetWaitableTimer设置开始定时的时间（如果传参是负数，则是相对于这个函数被调用的时间）、定时的间隔、定时间隔到时调用的函数</p>
<p>（3）CancelWaitableTimer取消WaitableTimer的定时。</p>
<p>&nbsp;</p>
<p><span style="color: #9bbb59;">6、其他等待函数</span><br />
<table width="571" border="0" cellspacing="0" cellpadding="2"><br />
<tbody><br />
<tr><br />
<td valign="top" width="208">MsgWaitForMultipleObjects和MsgWaitForMultipleObjectsEx</td><br />
<td valign="top" width="361">等待多个内核对象有信号、或指定类型消息到达线程的输入队列</td></p>
</tr>
<tr>
<td valign="top" width="208">SingleObjectAndWait</td>
<td valign="top" width="361">在一个原子操作完成设置一个内核对象为有信号，并进入等待另一个内核对象</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><span style="color: #9bbb59;">7、各同步的内核对象的理解</span></p>
<p>（1）关键代码段:<br />
<blockquote>critical section ,关键代码段之间的代码是原子操作，同一时间只能有一个线程执行该段代码，与别的同步object都是内核态的同步相比，它争取用用户态的方式进行同步，如果用户态的用户不行，才用内核态的同步，这样效率更高,花费较少</blockquote><br />
（2）锁:<br />
<blockquote>mutex，只允许一个线程拥有</p>
<p>semaphore，允许指定数量的线程拥有，创建此object时可以指定能拥有的最多的线程数</blockquote><br />
（3）信号：<br />
<blockquote>event，不同于锁，就如它的名字是“信号”，当一个线程拥有锁的时候就会改变锁的状态以达到同步（`成功拥有mutex则使它无信号；成功拥有semaphore则使它计数减一，当计数为零，则semaphore变成无信号状态），手动设置的event的状态只有线程调用SetEvent或ResetEvent才会改变，线程则通过WaitForSingleObject等检测信号状态的函数来达到同步。</blockquote><br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/45011'>http://goorockey.github.com/blogs/45011</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Windows核心编程》读书笔记2--进程、作业、线程]]></title>
    <link href="http://goorockey.github.com/blogs/43008"/>
    <updated>2011-09-03T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/43008</id>
    <content type="html"><![CDATA[<p><strong><span style="font-size: large;">一、摘要：</span></strong></p>
<p><span style="color: #ffff00; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">1、进程只是线程的容器，存放数据和代码，但不执行代码。</span></span></p>
<p><span style="color: #ffff00; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">2、线程才是执行代码的实体。</span></span></p>
<p><span style="color: #ffff00; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">3、作业是对一个或多个进程的统一管理，能添加一般无法添加的限制。</span></span></p>
<p><strong><span style="font-size: large;">二、进程</span></strong></p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">1、概念</span></span></p>
<p><span style="color: #c0c0c0;"><span style="color: #ff8080;">进程只是线程的容器</span>，为线程执行代码提供资源、营造运行环境。<!--more--></span></p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">2、进程的构成</span></span></p>
<p>（1）关键：<br />
<blockquote>一块内存地址空间，用以存放代码和数据；</p>
<p>一个内核对象句柄表，记录使用中的内核对象。</blockquote><br />
（2）更详尽的构成</p>
<p>（来自MSDN <a href="http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx">http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx</a>）：<br />
<blockquote>a virtual address space,</p>
<p>executable code,</p>
<p>open handles to system objects,</p>
<p>a security context,</p>
<p>a unique process identifier,</p>
<p>environment variables,</p>
<p>a priority class,</p>
<p>minimum and maximum working set sizes,</p>
<p>at least one thread of execution.</blockquote><br />
<span style="color: #ffff00;"><span style="color: #ff0000;">3、进程的终止</span></span></p>
<p>（1）全部线程都结束。即使主线程退出了，如果还有线程存在，该进程仍然不会销毁。</p>
<p>（2）ExitProcess，有可能造成内存泄露，因为C/C++ Runtime Library没有被清空，则全局变量等资源就不会被释放。</p>
<p>（3）TerminateProcess，跟ExitProcess一样是可能造成内存泄露的。另外它是异步的，即只是通知要终止目标进程，返回后并不代表它已结束。</p>
<p><strong><span style="font-size: large;">三、作业</span></strong></p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">1、基本概念</span></span></p>
<p>（1）<span style="color: #ff8080;">作业是进程的容器</span>，对一个或多个进程附加一定的限制，进行统一管理。</p>
<p>（2）即使作业只包含了一个进程也是有用的，因为这样能做一些普通不能进行的限制</p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">3、主要的API：</span></span><br />
<table width="439" border="0" cellspacing="0" cellpadding="2"><br />
<tbody><br />
<tr><br />
<td valign="top" width="200"><span class="caps">API</span></td><br />
<td valign="top" width="237">功能</td></p>
</tr>
<tr>
<td valign="top" width="200">CreateJobObject</td>
<td valign="top" width="237">创建作业内核对象</td>
</tr>
<tr>
<td valign="top" width="200">OpenJobObject</td>
<td valign="top" width="237">根据Handle打开作业内核对象</td>
</tr>
<tr>
<td valign="top" width="200">IsProcessInJob</td>
<td valign="top" width="237">验证某一个进程是否存在于作业中</td>
</tr>
<tr>
<td valign="top" width="200">SetInformationJobObject</td>
<td valign="top" width="237">给作业加上各种限制</td>
</tr>
<tr>
<td valign="top" width="200">QueryInformationJobObject</td>
<td valign="top" width="237">查询作业对象的信息</td>
</tr>
<tr>
<td valign="top" width="200">AssignProcessToJobObject</td>
<td valign="top" width="237">将进程放入作业</td>
</tr>
<tr>
<td valign="top" width="200">TerminateJobObject</td>
<td valign="top" width="237">终止作业内所有进程</td>
</tr>
</tbody>
</table>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">3、用于作业对象的基本用户界面限制的位标志</span> </span><br />
<table width="618" border="0" cellspacing="0" cellpadding="2"><br />
<tbody><br />
<tr><br />
<td valign="top" width="188">标志</td><br />
<td valign="top" width="428">描述</td></p>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_EXITWINDOWS</td>
<td valign="top" width="428">用于防止进程通过ExitWindowsEx函数退出、关闭、重新引导或关闭系统电源</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_READCLIPBOARD</td>
<td valign="top" width="428">防止进程读取剪贴板的内容</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_WRITECLIPBOARD</td>
<td valign="top" width="428">防止进程删除剪贴板的内容</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS</td>
<td valign="top" width="428">防止进程通过SystemParametersInfor函数来改变系统参数</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_DISPLAYSETTINGS</td>
<td valign="top" width="428">防止进程通过ChangeDisplaySettings函数来改变显示设置</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_GLOBALATOMS</td>
<td valign="top" width="428">为作业赋予它自己的基本结构表，使作业中的进程只能访问该作业的表</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_DESKTOP</td>
<td valign="top" width="428">防止进程使用CreateDesktop或SwitchDesktop函数创建或转换桌面</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_HANDLES</td>
<td valign="top" width="428">防止作业中的进程使用同一作业外部的进程创建的USER对象（如HWND）</td>
</tr>
</tbody>
</table>
<p><strong><span style="font-size: large;">四、线程</span></strong></p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">1、基本概念</span></span></p>
<p>（1）进程不执行代码的，<span style="color: #ff8080;">是线程在进程地址空间内执行代码</span>，并对进程地址空间内的数据做操作。</p>
<p>（2）多个线程共享进程内的地址空间，包括进程的内核对象句柄表，因为句柄表的存在依赖于进程，而不是线程。</p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">2、线程的构成</span></span></p>
<p>（1）关键：<br />
<blockquote>一个堆栈、</p>
<p>一些用于保护线程的寄存器、</p>
<p>一个指令寄存器（IP）、</p>
<p>堆栈指针寄存器（SP）</blockquote><br />
（2）更详尽的构成</p>
<p>（来自MSDN <a href="http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx">http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx</a>）：<br />
<blockquote>All threads of a process share its virtual address space and system resources.</p>
<p>In addition, each thread maintains exception handlers, a scheduling priority, thread local storage, a unique thread identifier, and a set of structures the system will use to save the thread context until it is scheduled.</p>
<p>The thread context includes the thread&#8217;s set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread&#8217;s process.</p>
<p>Threads can also have their own security context, which can be used for impersonating clients.</blockquote><br />
<span style="color: #ffff00;"><span style="color: #ff0000;">3、线程的启动</span></span></p>
<p>(1)初始化线程时会把 线程函数的入参(pvParam)、线程函数的指针(pfnStartAddrj) 压栈。</p>
<p><a href="http://www.goorockey.com/uploads/2011/09/clip_image0011.png"><img class="alignnone size-full wp-image-77043" title="clip_image001" src="http://www.goorockey.com/uploads/2011/09/clip_image0011.png" alt="" width="252" height="205" /></a></p>
<p>（2）、每个线程还有一个指令寄存器（IP）和堆栈指针寄存器（SP）。IP初始指向BaseThreadStart函数，它包含在Kernel32.dll中。</p>
<p>它主要是调用线程函数，并把函数返回值传给ExitThread：<br />
<div id="codeSnippetWrapper"><br />
<div id="codeSnippet" style="text-align: left; line-height: 12pt; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 1:</span> <span class="caps">VOID</span> BaseThreadStart(PTHREAD_START_ROUTINE pfnStartAddr,<span class="caps">PVOID</span> pvParam)<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 2:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 3:</span> __try<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 4:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 5:</span> ExitThread((pfnStartAddr)(pvParam));<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 6:</span> }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 7:</span> __except(UnhandledExceptionFilter(GetExceptionInformation()))<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 8:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 9:</span> ExitProcess(GetExceptionCode());<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 10:</span> }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 11:</span><span style="color: #008000;">//<span class="caps">NOTE</span>: We never get here. </span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; margin: 0em; width: 100%; font-family: ; color: black; overflow: visible; padding: 0px;"><span style="color: #606060;"> 12:</span> }<br />
&nbsp;</p>
</div>
</div>
<p><span style="color: #c0c0c0;">（3）</span>之所以pfnStartAddr和pvParam压栈，就是因为线程开始运行时，CPU跳到IP指向BaseThreadStart，然后把pfnStartAddr和pvParam出栈，就把它们当做形参传给BaseThreadStart了。</p>
<p><span style="color: #c0c0c0; font-size: large;"><strong>五、其他</strong></span></p>
<p><span style="color: #ffff00; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">1、C/C++ Runtime Library的多线程版本</span></span></p>
<p>（1）在C/C++ Runtime Library中，有一些全局变量。它们有可能同时被多个线程访问，使它们的值无法确定。</p>
<p>（2）C/C++ Runtime Library为了适应多线程，出现多线程(MT)版本，改变一些全局变量和函数的特性。</p>
<p>（3）主要思路是为每个线程关联一个数据结构<span style="color: #ff8080;">tiddata块</span>，里面都有各全局变量对于这个线程的副本。即每个线程访问的是属于自己的“全局变量”，有属于自己的独立环境。</p>
<p>（4）而相关的函数对这些全局变量的操作也会改为对于<span style="color: #c0c0c0;">tiddata块</span>对于值的操作。<br />
<blockquote>例如：</p>
<p><em>beginthreadex就是在调用CreateThread来创建线程的基础上，在线程初始化时创建线程关联的<span style="color: #c0c0c0;">tiddata块</span>，并把这些全局变量拷贝到里面。所以</em>beginthreadex比CreateThread要安全。</p>
<p>_endthreadex则是对应多做了清空关联数据结构的操作。</blockquote><br />
（5）如果在多线程版本的C/C++ Runtime Library中，用了CreateThread来创建线程，则线程初始化时不会有<span style="color: #c0c0c0;">tiddata块</span>。而当函数要访问<span style="color: #c0c0c0;">tiddata块</span>的时候，开始会访问失败，然后会自动生成一个，并把它与线程关联起来。但在一些情况下调用CreateThread就可能出现错误。</p>
<p>（6）_beginthread比_beginthreadex、以及_endthread比_endthreadex的参数要少，少了对线程安全访问权的控制。</p>
<p><span style="color: #ff0000;"> </span><span style="color: #ffff00; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">2、伪句柄</span></span></p>
<p>（1）用GetCurrentThread和GetCurrentProcess得到句柄是自己句柄的引用，并不会使线程进程的使用计数加1，它们返回的句柄叫伪句柄。</p>
<p>（2）用CloseHandle关闭伪句柄时，会返回FALSE。</p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">3、纤程</span></span></p>
<p>（1）UNIX服务器应用程序属于单线程程序（Windows定义），但其内部仿真了多线程工作。为了方便把UNIX服务器应用程序移植到Windows，就推出了纤程。</p>
<p>（2）ConvertThreadToFiber 把线程转换为纤程。</p>
<p>（2）纤程不应该返回，返回会使线程和该线程所有的纤程都撤销。</p>
<p>（3）在单个线程里，每次只能运行一个纤程。可以用SwtichToFiber来切换纤程<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/43008'>http://goorockey.github.com/blogs/43008</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Windows核心编程》读书笔记1--内核对象]]></title>
    <link href="http://goorockey.github.com/blogs/48001"/>
    <updated>2011-09-02T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/48001</id>
    <content type="html"><![CDATA[<p><span style="color: #ffff00;"><strong><span style="color: #c0c0c0; font-size: large;">一、摘要</span></strong></span></p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">1、内核对象有使用计数，当计数减为0时，内核对象被销毁。</span></span></p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">2、内核对象有安全描述符，控制该进程能做的操作。</span></span></p>
<p><span style="color: #ffff00;"><span style="color: #ff0000;">3、每个进程内有内核对象句柄表，记录使用中的内核对象。</span></span></p>
<p><span style="color: #ffff00;"><strong> </strong></span></p>
<p><span style="color: #ffff00;"><strong><span style="color: #c0c0c0; font-size: large;">二、内核对象</span></strong></span></p>
<p><span style="color: #ffff00;"><strong><span style="color: #ff0000;">1、对内核对象的操作,只能通过调API</span></strong></span></p>
<p>（1）应用程序无法在内存中找到表示内核对象的数据结构,也就无法直接修改其状态。</p>
<p>（2）要对内核对象操作，只能先获得其句柄，然后调用window定义好的API<!--more--></p>
<p><span style="color: #ffff00;"><strong><span style="color: #ff0000;">2、内核对象的使用计数，记录在使用它的进程数</span></strong></span></p>
<p>（1）内核对象是属于内核的，而不属于任何一个进程，包括创建它的哪个进程。</p>
<p>（2）内核对象中有一个使用计数的数据，记录在使用它的进程数。</p>
<p>（3）只有当使用计数为零时，该内核对象才会被销毁。</p>
<p>（4）即使创建它的进程终止了，该内核对象的使用计数不为零就不会被销毁。</p>
<p><span style="color: #ffff00;"><strong><span style="color: #ff0000;">3、内核对象的安全描述符，控制进程对其的使用权</span></strong></span></p>
<p>（1）在创建内核对象的API中，都有一个“安全描述符”的参数，是用来控制对这个内核对象的使用权的</p>
<p>例如创建文件内存映射CreateFileMapping就有一个PSECURITY_ATTRIBUTES的参数。</p>
<p>（2）而在获取该内核对象的API OpenFileMapping中，会有一个表征获取该对象做什么操作的参数。</p>
<p>如果该用户允许对该内核对象做该操作，则成功返回该内核对象句柄，否则返回NULL</p>
<p>（3）分辨一个对象是否为内核对象的标志是，创建该对象的API是否有“安全描述符”这个参数。</p>
<p>如创建GDI就没有该参数，所以GDI不是内核对象</p>
<p><span style="color: #ffff00;"><strong><span style="color: #ff0000;">4、进程的内核对象句柄表，记录使用的内核对象</span></strong></span></p>
<p>内核对象句柄表结构：<br />
<table width="563" border="1" cellspacing="0" cellpadding="2"><br />
<tbody><br />
<tr><br />
<td valign="top" width="102">索引<br />
(Handle)</td><br />
<td valign="top" width="159"><span style="color: #ff8080;">内核对象内存块的指针</span></td><br />
<td valign="top" width="150">访问屏蔽<br />
（标志位的DWORD）</td><br />
<td valign="top" width="150">继承标志<br />
（标志位的DWORD ）</td></p>
</tr>
<tr>
<td valign="top" width="102">1</td>
<td valign="top" width="159">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
</tr>
<tr>
<td valign="top" width="102">2</td>
<td valign="top" width="159">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
</tr>
<tr>
<td valign="top" width="102">…</td>
<td valign="top" width="159">…</td>
<td valign="top" width="151">…</td>
<td valign="top" width="151">…</td>
</tr>
</tbody>
</table>
<p>（1）每个进程内都有一个内核对象句柄表来记录它在使用的内核对象，表中包含该内核对象内存块的指针。</p>
<p>在内核对象的句柄就是该内核对象在此表中的索引值。</p>
<p>（2）创建内核对象时，会在表中寻找空白项，并添加新项，并通过该内核对象指针对它的使用计数置1.</p>
<p>（3）用CloseHandle释放进程对该内核对象使用权时，就通过该指针对使用计数减1</p>
<p>（4）即使没有用CloseHandle，当进程终止时，会对句柄表中没有释放使用权的内核对象计数减1</p>
<p><span style="color: #ffff00;"><strong><span style="color: #ff0000;">5、进程间访问内核对象</span></strong></span></p>
<p>（1）设置子进程继承父进程的内核对象</p>
<p>（2）创建有名字的内核对象，并通过内核对象名字访问它。</p>
<p>（3）DuplicateHandle 复制内核对象</p>
<p><strong><span style="color: #ff0000;">6、当用Create*（如CreateMutex）创建有名字的内核对象</span></strong></p>
<p>（1）如果<span style="color: #ff8080;">同名字</span>、<span style="color: #ff8080;">同类</span>的内核对象已存在，则返回该内核对象的Handle；</p>
<p>（2）如果<span style="color: #ff8080;">同名字</span>、<span style="color: #ff8080;">不同类</span>的内核对象已存在，则创建失败，并返回NULL</p>
<p>（3）如果没有同名字的内核对象存在，则创建新内核对象<br />
<br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/48001'>http://goorockey.github.com/blogs/48001</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试趣题]]></title>
    <link href="http://goorockey.github.com/blogs/38007"/>
    <updated>2011-08-24T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/38007</id>
    <content type="html"><![CDATA[<p><strong>题一、有一个整数数组，请求出两两之差绝对值最小的值</strong></p>

<p>方法：先排序，再找差值最小的点对。</p>

<p>效率：时间复杂度O(nlogn)</p>

<hr />

<p><strong>题二、平面上N个点，每两个点都确定一条直线，求出斜率最大的那条直线所通过的两个点（斜率不存在的情况不考虑）</strong></p>

<p>方法：根据x排序，用图解枚举所有情况，能证明斜率最大的两点肯定是相邻的两点。</p>

<p>效率：时间复杂度O(nlogn)</p>

<hr />
<p><strong>题三、一棵排序二叉树，令 f=(最大值+最小值)/2，设计一个算法，找出距离f值最近、大于f值的结点</strong></p>

<p>方法：把f插入，中序排序</p>

<p>效率：时间复杂度O(logn)</p>

<!--more-->

<hr />
<p><strong>题四、找出两个字符串中最大公共子字符串,</strong></p>

<p>如”abccade”,”dgcadde”的最大子串为”cad”</p>

<p><em>方法一：</em></p>

<p>从字符串一中遍历子串，并在字符串二中匹配。时间复杂度为O(n^3)。</p>

<p><em>方法二：</em></p>

<p>矩阵法：用矩阵表示两字符串，横竖字符相同的格置1，则在45度方向连续1最多的就是所求，时间复杂度O(n^2) 。</p>

<hr />
<p><strong>题五、检查单向链表中是否有环</strong></p>

<p>这算是经典的面试题了，记录一下好的解法和推广。</p>

<p><em>方法一：</em></p>

<p>操作：把链表反向，当游标指针回到首节点时表示有环，否则无环。</p>

<p>解释：如果有环，把链表反向后，游标指针会从环内回到环外，最后回到首节点。</p>

<p>效率：时间复杂度O(n)，空间复杂度O(1)。</p>

<p>不足：破坏原链表的结构，需要再遍历一次链表来恢复链表结构。</p>

<p><em>方法二:</em></p>

<p>操作：</p>

<p>两个游标指针,一个慢指针每次移动一个节点，一个快指针每次移动两个节点。如果在快指针遍历到链表结尾前遇到慢指针，则链表有环，否则无环。</p>

<p>解释：</p>

<p>如果有环，当慢指针刚进入环时，设快指针与慢指针的距离为n（距离指慢指针不动是，快指针要经过几次节点达到慢指针），由于快指针每次都追上慢指针一个节点，则两者经过n次后总会相遇。</p>

<p>效率：时间复杂度O(n)， 空间复杂度O(1)。</p>

<p><em>代码：</em></p>

<div><script src="https://gist.github.com/3712175.js?file="></script>
<noscript><pre><code>bool TestLoop( LinkNode *pHead )
{
    LinkNode *pFast = pHead, *pSlow = pHead;

    while ( 1 ) 
    {   
        if ( pFast &amp;&amp; pFast-&gt;pNext )
        {   
            pFast = pFast-&gt;pNext-&gt;pNext;
        }   
        else
        {   
            return false;
        }   

        if ( pSlow )
        {   
            pSlow = pSlow-&gt;pNext;
        }   

        if ( pSlow == pFast )
        {   
            return true;
        }   
    }   
}
</code></pre></noscript></div>

<hr />
<p><strong>推广一：有环单向链表中环的节点数</strong></p>

<p>操作：</p>

<p>还是用快慢指针，当快慢指针在环内相遇后，两指针继续移动，并对慢指针移动的节点计数。当两指针再次相遇时，计数的结果就是环的节点数。</p>

<p>解释：</p>

<p>还是题一中的思想。设环的节点数为n，当两指针第一次相遇时，可看做两指针的距离为n，则再慢指针再经过n个节点后，两指针会再次相遇，所以慢指针移动的节点数就是环的节点数。</p>

<p><em>代码：</em></p>

<div><script src="https://gist.github.com/3712217.js?file="></script>
<noscript><pre><code>//计算有环单向链表中环的节点数
intTestLoopLength(LinkNode*pHead)
{
    LinkNode*pSlow=pHead,*pFast=pHead;

    //检查是否有环
    while(1)
    {   
        if(pFast&amp;&amp;pFast-&gt;pNext)
        {   
            pFast=pFast-&gt;pNext-&gt;pNext;
        }   
        else
        {   
            return0;
        }   

        if(pSlow)
        {   
            pSlow=pSlow-&gt;pNext;
        }   

        if(pSlow==pFast)
        {   
            break;
        }   
    }   

    //继续移动，并计数慢指针的移动节点数
    intnLoopLength=0;
    while(1)
    {   
        pFast=pFast-&gt;pNext-&gt;pNext;
        pSlow=pSlow-&gt;pNext;
        nLoopLength++;
        if(pFast==pSlow)
        {   
            break;
        }   
    }   

    returnnLoopLength;
}
</code></pre></noscript></div>

<hr />
<p><strong>推广二、找到有环单向链表中环首节点</strong></p>

<p>如以下有环单向链表：</p>

<p>1=&gt;2=&gt;3=&gt;4=&gt;5=&gt;6=&gt;7=&gt;9=&gt;4</p>

<p>即第9节点的next指针指向第4节点，则环的首节点为第4节点</p>

<p>操作：</p>

<ol>
  <li>先计算环的节点数n。</li>
  <li>两个前后指针，前指针先移动n个节点，然后两指针一齐移动，每次都只移动一个的节点。</li>
  <li>当两指针相遇时，两指针指向的节点就是所求的环首节点。</li>
</ol>

<p>解释：因为开始两指针相距n个节点，当后指针刚进入环时，肯定会与前指针在环的首节点相遇。</p>

<hr />
<p><strong>推广三、破坏有环单向链表的环</strong></p>

<p>操作：</p>

<p>在上面的基础上，当找到了环首节点和环内节点数n后，只要从环首节点移动n到达环的尾节点，修改环尾节点的next指针即可。</p>

<p><em>代码：</em></p>

<div><script src="https://gist.github.com/3712226.js?file="></script>
<noscript><pre><code>// 破坏有环单向链表的环
void BreakLoop( LinkNode *pHead  )
{
    // 计算环的节点数n 
    int nLoopLength = TestLoopLength( pHead );

    if ( nLoopLength &gt; 0 ) 
    {   
        LinkNode *pSlow = pHead, *pFast = pHead;

        // 让一个指针先移动n个节点
        for (int i = 0; i &lt; nLoopLength; ++i)
        {   
            pFast = pFast-&gt;pNext;
        }   

        // 同时移动两指针，会在环的首节点相遇
        while ( pSlow != pFast )
        {   
            pFast = pFast-&gt;pNext;
            pSlow = pSlow-&gt;pNext;
        }   

        // 遍历到环的尾节点
        for (int i = 0; i &lt; nLoopLength - 1; ++i)
        {   
            pSlow = pSlow-&gt;pNext;
        }   

        assert( pSlow-&gt;pNext != pFast );

        // 修改环尾节点的next指针
        pSlow-&gt;pNext = NULL;
    }   
}
</code></pre></noscript></div>

<hr />
<p><strong>题五、找到有序链表的中位值</strong></p>

<p>常规方法：遍历一次链表得到链表长度length，再遍历一次链表到length/2的位置即为中位值</p>

<p>更好的方法：用两个指针p1、p2，p1每次走两步，p2每次走一步，等到p1到链表尾时，p2所指即为中位值</p>

<div><script src="https://gist.github.com/3824662.js?file="></script>
<noscript><pre><code>void GetMiddle(Link ＊l, LinkNode **ppNode)
{
    LinkNode *p1 = l, *p2 = l;

    while (p1 != NULL &amp;&amp; p1-&gt;next != NULL)
    {
        p1 = p1-&gt;next-&gt;next;
        p2 = p2-&gt;next;
    }

    *ppNode = p2;
}</code></pre></noscript></div>

<p><br />
            <br />
            转载请注明原文链接
            <a href="http://goorockey.github.com/blogs/38007">http://goorockey.github.com/blogs/38007</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不用除法运算符实现除法及其推广]]></title>
    <link href="http://goorockey.github.com/blogs/28004"/>
    <updated>2011-08-22T00:00:00+08:00</updated>
    <id>http://goorockey.github.com/blogs/28004</id>
    <content type="html"><![CDATA[<p>两个正整数x、y，x是y的倍数，不用除法运算符实现x / y。</p>
<p>1、最简单的方法</p>
<p>循环用x减y，知道x等于0。<br />
<div id="codeSnippetWrapper" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; width: 97.5%; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; cursor: text; border: silver 1px solid; padding: 4px;"><br />
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 1:</span> <span style="color: #0000ff;">int</span> Div( <span style="color: #0000ff;">int</span> x, <span style="color: #0000ff;">int</span> y )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 2:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 3:</span>     <span style="color: #0000ff;">int</span> result = 0;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 4:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 5:</span>     <span style="color: #0000ff;">while</span> ( x &gt; y )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 6:</span>     {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 7:</span>         x -= y;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 8:</span>         result++;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 9:</span>     }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 10:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 11:</span>     <span style="color: #0000ff;">return</span> result;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 12:</span> }<br />
&nbsp;</p>
</div>
</div>
<p>时间复杂度O(n)<!--more--></p>
<p>2、用移位实现</p>
<p>与很多优化算法相似，用2次幂实现加速。</p>
<p>考虑到x是y的倍数，设x = y * k</p>
<p>因为我们可以用二进制表示任意整数，所以任意整数都可表示成2次幂的和，即：<br />
<blockquote>k = 2^t1 + 2^t2 + …. + 2^tn;</blockquote><br />
所以有x = y * (2^t1 + 2^t2 + … + 2^tn)，即我们要的结果就是2^t1 + 2^t2 + … + 2^tn</p>
<p>由此，我们可以先找到一个刚好不大于x的s1 = y*(2^t1)，即有y*2^t1 &lt;= x &lt; y*2^(t1+1)，</p>
<p>然后令x2 = x &#8211; s1 = y * (2^t2 + … + 2^tn)，从而继续递归直到xn – sn = 0。<br />
<div id="codeSnippetWrapper"><br />
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 1:</span> <span style="color: #0000ff;">int</span> Div( <span style="color: #0000ff;">int</span> x, <span style="color: #0000ff;">int</span> y )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 2:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 3:</span>     <span style="color: #0000ff;">int</span> i = 1;          <span style="color: #008000;">// 2次幂计数器</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 4:</span>     <span style="color: #0000ff;">int</span> product = y;    <span style="color: #008000;">// 中间乘积，等于y*2^t，即product = y * i</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 5:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 6:</span>     <span style="color: #008000;">// 找到刚好不大于x的product = y*i满足y*i &lt;= x &lt; y*(i+1)</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 7:</span>     <span style="color: #0000ff;">while</span> ( product &lt;&lt; 1 &lt;= x )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 8:</span>     {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 9:</span>         i  &lt;&lt;= 1;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 10:</span>         product &lt;&lt;= 1;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 11:</span>     }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 14:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 15:</span>     <span style="color: #008000;">// 递归得到结果</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 16:</span>     <span style="color: #0000ff;">int</span> result = 0;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 17:</span>     <span style="color: #0000ff;">for</span> ( ; x &gt; 0; i &gt;&gt;= 1, product &gt;&gt;= 1 )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 18:</span>     {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 19:</span>         <span style="color: #008000;">// product自除2来寻找新的product，满足刚好不大于x</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 20:</span>         <span style="color: #0000ff;">if</span> ( x &gt;= product )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 21:</span>         {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 22:</span>             result += i;     <span style="color: #008000;">// 累加结果result = 2^t1 + 2^t2 &#8230; + 2^t(k-1)</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 23:</span>             x -= product;    <span style="color: #008000;">// 相减得到新的x = y*(2^tk + &#8230; + 2^tn)</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 24:</span>         }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 25:</span>     }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 26:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 27:</span>     <span style="color: #0000ff;">return</span> result;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 28:</span> }<br />
&nbsp;</p>
</div>
</div>
<p>时间复杂度O(logn)</p>
<p>3、推广 &#8211; 不用开方运算符求幂数：</p>
<p>两个正整数x、y，不用开方运算符求x是y的几次幂。</p>
<p>思想与方法二类似。<br />
<div id="codeSnippetWrapper"><br />
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 1:</span> <span style="color: #cc6633;">#include</span> <span style="color: #006080;">&#8220;math.h&#8221;</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 2:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 3:</span> <span style="color: #0000ff;">int</span> Extract( <span style="color: #0000ff;">int</span> x, <span style="color: #0000ff;">int</span> y )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 4:</span> {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 5:</span>     <span style="color: #0000ff;">int</span> i = 1, power = y;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 6:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 7:</span>     <span style="color: #0000ff;">while</span> ( power * power &lt;= x )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 8:</span>     {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 9:</span>         i &lt;&lt;= 1;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 10:</span>         power *= power;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 11:</span>     }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 12:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 13:</span>     <span style="color: #0000ff;">int</span> result = 0;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 14:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 15:</span>     <span style="color: #0000ff;">for</span> ( ; x &gt; 1; i &gt;&gt;= 1, power /= pow( y, i ))<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 16:</span>     {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 17:</span>         <span style="color: #0000ff;">if</span> ( x &gt;= power )<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 18:</span>         {<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 19:</span>             x /= power;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 20:</span>             result += i;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 21:</span>         }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 22:</span>     }<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 23:</span><br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 24:</span>     <span style="color: #0000ff;">return</span> result;<br />
&nbsp;<br />
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #606060;"> 25:</span> }<br />
&nbsp;</p>
</div>
</div>
<div>时间复杂度O(logn)</div>
<p><br/>
            <br/>
            转载请注明原文链接<br />
            <a href='http://goorockey.github.com/blogs/28004'>http://goorockey.github.com/blogs/28004</a></p>]]></content>
  </entry>
  
</feed>
