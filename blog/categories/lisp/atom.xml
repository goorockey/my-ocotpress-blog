<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: lisp | Goorockey's Blog]]></title>
  <link href="http://www.goorockey.com/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://www.goorockey.com/"/>
  <updated>2014-04-29T10:51:03+08:00</updated>
  <id>http://www.goorockey.com/</id>
  <author>
    <name><![CDATA[Goorockey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scheme里面的pair和list]]></title>
    <link href="http://www.goorockey.com/blog/2012/09/25/pair-and-list-in-scheme/"/>
    <updated>2012-09-25T22:41:00+08:00</updated>
    <id>http://www.goorockey.com/blog/2012/09/25/pair-and-list-in-scheme</id>
    <content type="html"><![CDATA[<p>最近学scheme，总结一下pair和list的区别，主要是两点：</p>

<h4 id="listpairnulllistpairlist">1. list一定是pair，但只有以null（空list）结尾的pair才是list</h4>

<p>对于(define list1 (list a b c)),list1表现为(a b c),其实也可以写成(a . (b . ()))。</p>

<p>可以看到list其实就是pair,而且是以null结尾的pair。</p>

<p>对于像(a.(b.(c.d)))这样的连续pair，因为没有以空list结尾，所以不是list</p>

<p>所以有：</p>

<pre><code>&gt; (define x '(1 2))
&gt; x
(1 2)
&gt; (list? x)
#t
&gt; (cons? x)
#t
&gt; (cddr x) ; 以null结尾
()

&gt; (define y (cons 1 2))
&gt; (list? y)
#f
&gt; (cons? y)
#f
&gt; (set-cdr! y '()) ; 把y的cdr设为null，使y变成list
&gt; y
(1)
&gt; (list? y) ; 变成了list
#t
&gt; (cons? y)
#t
</code></pre>

<h4 id="pair">2. pair的显示规则</h4>

<p>引用<a href="http://download.plt-scheme.org/doc/html/guide/Pairs__Lists__and_Scheme_Syntax.html">这里</a>的解释：</p>

<p><blockquote><p>In general, the rule for printing a pair is as follows: use the dot notation always, but if the dot is immediately followed by an open parenthesis, then remove the dot, the open parenthesis, and the	matching close parenthesis. Thus, (0 . (1 . 2)) becomes (0 1 . 2), and (1 . (2 . (3 . ()))) becomes (1 2 3).</p></blockquote></p>

<p>大意就是，如果pair的“点”紧接着小括号，则这个点和小括号都可以去掉。</p>

<p>所以(a.(b.c))等价于(a b.c), (a.(b.(c.())))等价于(a b c)。</p>
]]></content>
  </entry>
  
</feed>
