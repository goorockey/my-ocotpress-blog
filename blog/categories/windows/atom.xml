<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: windows | Goorockey's Blog]]></title>
  <link href="http://www.goorockey.com/blog/categories/windows/atom.xml" rel="self"/>
  <link href="http://www.goorockey.com/"/>
  <updated>2014-04-29T10:53:20+08:00</updated>
  <id>http://www.goorockey.com/</id>
  <author>
    <name><![CDATA[Goorockey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《Windows核心编程》读书笔记3--线程同步]]></title>
    <link href="http://www.goorockey.com/blogs/45011"/>
    <updated>2011-09-05T00:00:00+08:00</updated>
    <id>http://www.goorockey.com/blogs/45011</id>
    <content type="html"><![CDATA[<h3 id="section">原子操作</h3>

<p>能调用的原子操作</p>

<pre><code>LONG InterlockedExchangeAdd(PLONG plAddend,LONG Increment);
LONG InterlockedExchange(PLONG plTarget, LONG lValue);
PVOID InterlockedExchangePointer(PVOID* ppvTarget, PVOID pvValue);
PVOID InterlockedCompareExchange(PLONG plDestination, LONG lExchange, LONG lComparand);
PVOID InterlockedCompareExchangePointer(PVOID* ppvDestination, PVOID pvExchange, PVOID pvComparand);
</code></pre>

<!--more-->

<h3 id="section-1">以查询方式同步</h3>

<pre><code>volatile BOOL g_fFinishedCalculation = FALSE;

int WINAPI WinMain(…)
{
    CreateThread(…, RecalcFunc, …);
    …

    //Wait for the recalculation to complete. 
    while(!g_fFinishedCalculation);
    …
}

DWORD WINAPI RecalcFunc(PVOID pvParam)
{
    //Perform the recalculation. 
    …

    g_fFinishedCalculation = TRUE;

    return(0);
}
</code></pre>

<ul>
  <li>
    <p>查询的线程一直处于可调度状态，浪费CPU时间</p>
  </li>
  <li>
    <p>如果WinMain的线程优先级比ReclcFunc的线程要高，则g_fFinishedCalculation永远不会被置为TRUE。</p>
  </li>
</ul>

<h3 id="criticalsection">关键代码段Critical_Section</h3>

<ul>
  <li>
    <p>使用前调用InitializeCriticalSection进行初始化，使用后用DeleteCriticalSection释放资源</p>
  </li>
  <li>
    <p>在指向同一个Critical_Section的EnterCriticalSection和LeaveCriticalSection之间的代码，不会被多个线程同时调用</p>
  </li>
  <li>
    <p>同一个线程多次重入EnterCriticalSection和LeaveCriticalSection之间的代码不会发生死锁。</p>
  </li>
</ul>

<p>如下面代码不会有死锁：</p>

<pre><code>int main(int argc, char **argv)
{
    CRITICAL_SECTION cs;

    InitializeCriticalSection(&amp;cs);
    EnterCriticalSection(&amp;cs);
    EnterCriticalSection(&amp;cs);

    while(1)
    {
        cout &lt;&lt; “testing” &lt;&lt; endl;
    }

    LeaveCriticalSection(&amp;cs);
    LeaveCriticalSection(&amp;cs);

    return 0;
}
</code></pre>

<ul>
  <li>
    <p>考虑到线程进入等待状态时，要保护现场，这是非常耗时的。这可以用InitializeCriticalSectionAndSpinCount，它让想进入已被占用的关键代码段的线程先循环判断多次，才进入等待状态。</p>
  </li>
  <li>
    <p>InitializeCriticalSectionAndSpinCount只对多个CPU起作用，单个CPU不起作用。</p>
  </li>
  <li>
    <p>SetCriticalSectionSpinCount可以改变循环判断的次数</p>
  </li>
  <li>
    <p>关键代码段是在用户态实现同步的方法，这样比内核态同步要快，因为不用做用户态和内核态之间的往返（往返一次需要占用x 8 6平台上的大约1 0 0 0个C P U周期）。</p>
  </li>
</ul>

<h3 id="section-2">内核对象同步</h3>

<ul>
  <li>
    <p>当内核对象是自动设置为有信号时，在所有等待该内核对象的线程中，只会有一个变为可调度，然后该内核对象又自动设为无信号。</p>
  </li>
  <li>
    <p>当内核对象是手动设置为有信号时，除非手动设置该内核对象的状态，否则一直是有信号，这样所有等待该内核对象的线程都能变为可调度。</p>
  </li>
</ul>

<h3 id="waitabletimer">WaitableTimer</h3>

<ul>
  <li>
    <p>WaitableTimer能在规定时候或按规定的时间间隔变为有信号状态，就类似闹钟。</p>
  </li>
  <li>
    <p>SetWaitableTimer设置开始定时的时间（如果传参是负数，则是相对于这个函数被调用的时间）、定时的间隔、定时间隔到时调用的函数</p>
  </li>
  <li>
    <p>CancelWaitableTimer取消WaitableTimer的定时。</p>
  </li>
</ul>

<h3 id="section-3">其他等待函数</h3>

<table width="571" border="0" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="208">MsgWaitForMultipleObjects和MsgWaitForMultipleObjectsEx</td>
<td valign="top" width="361">等待多个内核对象有信号、或指定类型消息到达线程的输入队列</td>
</tr>
<tr>
<td valign="top" width="208">SingleObjectAndWait</td>
<td valign="top" width="361">在一个原子操作完成设置一个内核对象为有信号，并进入等待另一个内核对象</td>
</tr>
</tbody>
</table>

<h3 id="section-4">各同步的内核对象的理解</h3>

<ul>
  <li>
    <p>关键代码段:</p>

    <p>critical section ,关键代码段之间的代码是原子操作，同一时间只能有一个线程执行该段代码，与别的同步object都是内核态的同步相比，它争取用用户态的方式进行同步，如果用户态的用户不行，才用内核态的同步，这样效率更高,花费较少</p>
  </li>
  <li>
    <p>锁:</p>

    <p>mutex，只允许一个线程拥有
  semaphore，允许指定数量的线程拥有，创建此object时可以指定能拥有的最多的线程数</p>
  </li>
  <li>
    <p>信号：</p>

    <p>event，不同于锁，就如它的名字是“信号”，当一个线程拥有锁的时候就会改变锁的状态以达到同步（`成功拥有mutex则使它无信号；成功拥有semaphore则使它计数减一，当计数为零，则semaphore变成无信号状态），手动设置的event的状态只有线程调用SetEvent或ResetEvent才会改变，线程则通过WaitForSingleObject等检测信号状态的函数来达到同步。</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Windows核心编程》读书笔记2--进程、作业、线程]]></title>
    <link href="http://www.goorockey.com/blogs/43008"/>
    <updated>2011-09-03T00:00:00+08:00</updated>
    <id>http://www.goorockey.com/blogs/43008</id>
    <content type="html"><![CDATA[<h3 id="section">一、摘要：</h3>

<ul>
  <li>
    <p>进程只是线程的容器，存放数据和代码，但不执行代码。</p>
  </li>
  <li>
    <p>线程才是执行代码的实体。</p>
  </li>
  <li>
    <p>作业是对一个或多个进程的统一管理，能添加一般无法添加的限制。</p>
  </li>
</ul>

<h3 id="section-1">二、进程</h3>

<p>1.概念</p>

<p><strong>进程只是线程的容器</strong>，为线程执行代码提供资源、营造运行环境。</p>

<!--more-->

<p>2.进程的构成</p>

<ul>
  <li>关键：</li>
</ul>

<blockquote>
  <p>一块内存地址空间，用以存放代码和数据；
一个内核对象句柄表，记录使用中的内核对象。</p>
</blockquote>

<ul>
  <li>更详尽的构成</li>
</ul>

<p>(来自MSDN <a href="http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx">http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx</a>):</p>

<pre><code>a virtual address space,
executable code,
open handles to system objects,
a security context,
a unique process identifier,
environment variables,
a priority class,
minimum and maximum working set sizes,
at least one thread of execution.
</code></pre>

<p>3.进程的终止</p>

<ul>
  <li>
    <p>全部线程都结束。即使主线程退出了，如果还有线程存在，该进程仍然不会销毁。</p>
  </li>
  <li>
    <p>ExitProcess，有可能造成内存泄露，因为C/C++ Runtime Library没有被清空，则全局变量等资源就不会被释放。</p>
  </li>
  <li>
    <p>TerminateProcess，跟ExitProcess一样是可能造成内存泄露的。另外它是异步的，即只是通知要终止目标进程，返回后并不代表它已结束。</p>
  </li>
</ul>

<h3 id="section-2">三、作业</h3>

<p>1.基本概念</p>

<ul>
  <li>
    <p><strong>作业是进程的容器</strong>，对一个或多个进程附加一定的限制，进行统一管理。</p>
  </li>
  <li>
    <p>即使作业只包含了一个进程也是有用的，因为这样能做一些普通不能进行的限制</p>
  </li>
</ul>

<p>2.主要的API:</p>

<table width="439" border="0" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="200">API</td>
<td valign="top" width="237">功能</td>
</tr>
<tr>
<td valign="top" width="200">CreateJobObject</td>
<td valign="top" width="237">创建作业内核对象</td>
</tr>
<tr>
<td valign="top" width="200">OpenJobObject</td>
<td valign="top" width="237">根据Handle打开作业内核对象</td>
</tr>
<tr>
<td valign="top" width="200">IsProcessInJob</td>
<td valign="top" width="237">验证某一个进程是否存在于作业中</td>
</tr>
<tr>
<td valign="top" width="200">SetInformationJobObject</td>
<td valign="top" width="237">给作业加上各种限制</td>
</tr>
<tr>
<td valign="top" width="200">QueryInformationJobObject</td>
<td valign="top" width="237">查询作业对象的信息</td>
</tr>
<tr>
<td valign="top" width="200">AssignProcessToJobObject</td>
<td valign="top" width="237">将进程放入作业</td>
</tr>
<tr>
<td valign="top" width="200">TerminateJobObject</td>
<td valign="top" width="237">终止作业内所有进程</td>
</tr>
</tbody>
</table>

<p>3.用于作业对象的基本用户界面限制的位标志</p>

<table width="618" border="0" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="188">标志</td>
<td valign="top" width="428">描述</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_EXITWINDOWS</td>
<td valign="top" width="428">用于防止进程通过ExitWindowsEx函数退出、关闭、重新引导或关闭系统电源</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_READCLIPBOARD</td>
<td valign="top" width="428">防止进程读取剪贴板的内容</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_WRITECLIPBOARD</td>
<td valign="top" width="428">防止进程删除剪贴板的内容</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS</td>
<td valign="top" width="428">防止进程通过SystemParametersInfor函数来改变系统参数</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_DISPLAYSETTINGS</td>
<td valign="top" width="428">防止进程通过ChangeDisplaySettings函数来改变显示设置</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_GLOBALATOMS</td>
<td valign="top" width="428">为作业赋予它自己的基本结构表，使作业中的进程只能访问该作业的表</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_DESKTOP</td>
<td valign="top" width="428">防止进程使用CreateDesktop或SwitchDesktop函数创建或转换桌面</td>
</tr>
<tr>
<td valign="top" width="188">JOB_OBJECT_UILIMIT_HANDLES</td>
<td valign="top" width="428">防止作业中的进程使用同一作业外部的进程创建的USER对象（如HWND）</td>
</tr>
</tbody>
</table>

<h3 id="section-3">四、线程</h3>

<p>1.基本概念</p>

<ul>
  <li>
    <p>进程不执行代码的，<strong>是线程在进程地址空间内执行代码</strong>，并对进程地址空间内的数据做操作。</p>
  </li>
  <li>
    <p>多个线程共享进程内的地址空间，包括进程的内核对象句柄表，因为句柄表的存在依赖于进程，而不是线程。</p>
  </li>
</ul>

<p>2.线程的构成</p>

<ul>
  <li>
    <p>关键：</p>

    <p>一个堆栈、
  一些用于保护线程的寄存器、
  一个指令寄存器（IP）、
  堆栈指针寄存器（SP）</p>
  </li>
  <li>
    <p>更详尽的构成</p>
  </li>
</ul>

<p>（来自MSDN <a href="http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx">http://msdn.microsoft.com/zh-cn/library/ms681917(v=vs.85).aspx</a>）：</p>

<pre><code>All threads of a process share its virtual address space and system resources.
In addition, each thread maintains exception handlers, a scheduling priority, thread local storage, a unique thread identifier, and a set of structures the system will use to save the thread context until it is scheduled.
The thread context includes the thread's set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread's process.
Threads can also have their own security context, which can be used for impersonating clients.
</code></pre>

<p>3.线程的启动</p>

<ul>
  <li>初始化线程时会把 线程函数的入参(pvParam)、线程函数的指针(pfnStartAddrj) 压栈。</li>
</ul>

<p><img src="http://www.goorockey.com/uploads/2011/09/clip_image0011.png" alt="" /></p>

<ul>
  <li>每个线程还有一个指令寄存器（IP）和堆栈指针寄存器（SP）。IP初始指向BaseThreadStart函数，它包含在Kernel32.dll中。</li>
</ul>

<p>它主要是调用线程函数，并把函数返回值传给ExitThread：</p>

<pre><code>VOID BaseThreadStart(PTHREAD_START_ROUTINE pfnStartAddr,PVOID pvParam)
{
    __try
    {
        ExitThread((pfnStartAddr)(pvParam));
    }
    __except(UnhandledExceptionFilter(GetExceptionInformation()))
    {
        ExitProcess(GetExceptionCode());
    }
    //NOTE: We never get here. 
}
</code></pre>

<ul>
  <li>之所以pfnStartAddr和pvParam压栈，就是因为线程开始运行时，CPU跳到IP指向BaseThreadStart，然后把pfnStartAddr和pvParam出栈，就把它们当做形参传给BaseThreadStart了。</li>
</ul>

<h3 id="section-4">五、其他</h3>

<p>1.C/C++ Runtime Library的多线程版本</p>

<ul>
  <li>
    <p>在C/C++ Runtime Library中，有一些全局变量。它们有可能同时被多个线程访问，使它们的值无法确定。</p>
  </li>
  <li>
    <p>C/C++ Runtime Library为了适应多线程，出现多线程(MT)版本，改变一些全局变量和函数的特性。</p>
  </li>
  <li>
    <p>主要思路是为每个线程关联一个数据结构<strong>tiddata块</strong>，里面都有各全局变量对于这个线程的副本。即每个线程访问的是属于自己的“全局变量”，有属于自己的独立环境。</p>
  </li>
  <li>
    <p>而相关的函数对这些全局变量的操作也会改为对于<strong>tiddata块</strong>对于值的操作。</p>
  </li>
</ul>

<p>例如：</p>

<pre><code>_beginthreadex就是在调用CreateThread来创建线程的基础上，在线程初始化时创建线程关联的**tiddata块**，并把这些全局变量拷贝到里面。所以_beginthreadex比CreateThread要安全。
_endthreadex则是对应多做了清空关联数据结构的操作。
</code></pre>

<ul>
  <li>
    <p>如果在多线程版本的C/C++ Runtime Library中，用了CreateThread来创建线程，则线程初始化时不会有<strong>tiddata块</strong>。而当函数要访问<strong>tiddata块</strong>的时候，开始会访问失败，然后会自动生成一个，并把它与线程关联起来。但在一些情况下调用CreateThread就可能出现错误。</p>
  </li>
  <li>
    <p>_beginthread比_beginthreadex、以及_endthread比_endthreadex的参数要少，少了对线程安全访问权的控制。</p>
  </li>
</ul>

<p>2.伪句柄</p>

<ul>
  <li>
    <p>用GetCurrentThread和GetCurrentProcess得到句柄是自己句柄的引用，并不会使线程进程的使用计数加1，它们返回的句柄叫伪句柄。</p>
  </li>
  <li>
    <p>用CloseHandle关闭伪句柄时，会返回FALSE。</p>
  </li>
</ul>

<p>3.纤程</p>

<ul>
  <li>
    <p>UNIX服务器应用程序属于单线程程序（Windows定义），但其内部仿真了多线程工作。为了方便把UNIX服务器应用程序移植到Windows，就推出了纤程。</p>
  </li>
  <li>
    <p>ConvertThreadToFiber 把线程转换为纤程。</p>
  </li>
  <li>
    <p>纤程不应该返回，返回会使线程和该线程所有的纤程都撤销。</p>
  </li>
  <li>
    <p>在单个线程里，每次只能运行一个纤程。可以用SwtichToFiber来切换纤程</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Windows核心编程》读书笔记1--内核对象]]></title>
    <link href="http://www.goorockey.com/blogs/48001"/>
    <updated>2011-09-02T00:00:00+08:00</updated>
    <id>http://www.goorockey.com/blogs/48001</id>
    <content type="html"><![CDATA[<h3 id="section">一、摘要</h3>

<p>1.内核对象有使用计数，当计数减为0时，内核对象被销毁。</p>

<p>2.内核对象有安全描述符，控制该进程能做的操作。</p>

<p>3.每个进程内有内核对象句柄表，记录使用中的内核对象。</p>

<h3 id="section-1">二、内核对象</h3>

<p>1.对内核对象的操作,只能通过调API</p>

<ul>
  <li>
    <p>应用程序无法在内存中找到表示内核对象的数据结构,也就无法直接修改其状态。</p>
  </li>
  <li>
    <p>要对内核对象操作，只能先获得其句柄，然后调用window定义好的API</p>
  </li>
</ul>

<!--more-->

<p>2.内核对象的使用计数，记录在使用它的进程数</p>

<ul>
  <li>
    <p>内核对象是属于内核的，而不属于任何一个进程，包括创建它的哪个进程。</p>
  </li>
  <li>
    <p>内核对象中有一个使用计数的数据，记录在使用它的进程数。</p>
  </li>
  <li>
    <p>只有当使用计数为零时，该内核对象才会被销毁。</p>
  </li>
  <li>
    <p>即使创建它的进程终止了，该内核对象的使用计数不为零就不会被销毁。</p>
  </li>
</ul>

<p>3.内核对象的安全描述符，控制进程对其的使用权</p>

<ul>
  <li>
    <p>在创建内核对象的API中，都有一个“安全描述符”的参数，是用来控制对这个内核对象的使用权的
例如创建文件内存映射CreateFileMapping就有一个PSECURITY_ATTRIBUTES的参数。</p>
  </li>
  <li>
    <p>而在获取该内核对象的API OpenFileMapping中，会有一个表征获取该对象做什么操作的参数。
如果该用户允许对该内核对象做该操作，则成功返回该内核对象句柄，否则返回NULL</p>
  </li>
  <li>
    <p>分辨一个对象是否为内核对象的标志是，创建该对象的API是否有“安全描述符”这个参数。
如创建GDI就没有该参数，所以GDI不是内核对象</p>
  </li>
</ul>

<p>4.进程的内核对象句柄表，记录使用的内核对象</p>

<p>内核对象句柄表结构：</p>

<table width="563" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="102">索引
(Handle)</td>
<td valign="top" width="159"><span style="color: #ff8080;">内核对象内存块的指针</span></td>
<td valign="top" width="150">访问屏蔽
（标志位的DWORD）</td>
<td valign="top" width="150">继承标志
（标志位的DWORD ）</td>
</tr>
<tr>
<td valign="top" width="102">1</td>
<td valign="top" width="159">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
</tr>
<tr>
<td valign="top" width="102">2</td>
<td valign="top" width="159">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
<td valign="top" width="150">0 x ? ? ? ? ? ? ? ?</td>
</tr>
<tr>
<td valign="top" width="102">…</td>
<td valign="top" width="159">…</td>
<td valign="top" width="151">…</td>
<td valign="top" width="151">…</td>
</tr>
</tbody>
</table>

<ul>
  <li>
    <p>每个进程内都有一个内核对象句柄表来记录它在使用的内核对象，表中包含该内核对象内存块的指针。
在内核对象的句柄就是该内核对象在此表中的索引值。</p>
  </li>
  <li>
    <p>创建内核对象时，会在表中寻找空白项，并添加新项，并通过该内核对象指针对它的使用计数置1.</p>
  </li>
  <li>
    <p>用CloseHandle释放进程对该内核对象使用权时，就通过该指针对使用计数减1</p>
  </li>
  <li>
    <p>即使没有用CloseHandle，当进程终止时，会对句柄表中没有释放使用权的内核对象计数减1</p>
  </li>
</ul>

<p>5.进程间访问内核对象</p>

<ul>
  <li>
    <p>设置子进程继承父进程的内核对象</p>
  </li>
  <li>
    <p>创建有名字的内核对象，并通过内核对象名字访问它。</p>
  </li>
  <li>
    <p>DuplicateHandle 复制内核对象</p>
  </li>
</ul>

<p>6.当用Create*（如CreateMutex）创建有名字的内核对象</p>

<ul>
  <li>
    <p>如果<strong>同名字</strong>、<strong>同类</strong>的内核对象已存在，则返回该内核对象的Handle；</p>
  </li>
  <li>
    <p>如果<strong>同名字</strong>、<strong>不同类</strong>的内核对象已存在，则创建失败，并返回NULL</p>
  </li>
  <li>
    <p>如果没有同名字的内核对象存在，则创建新内核对象</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VC中对WM_NOTIFY的处理]]></title>
    <link href="http://www.goorockey.com/blogs/22004"/>
    <updated>2011-08-19T00:00:00+08:00</updated>
    <id>http://www.goorockey.com/blogs/22004</id>
    <content type="html"><![CDATA[<p>1.Reflect</p>

<p>对于WM_NOTIFY消息：</p>

<blockquote>
  <p>子控件没有Reflect，则由父窗口处理。
只要子控件（即消息对应最直接的控件）有了ON_NOTIFY_REFLECT就会被子控件处理,不会被父窗口所处理。</p>
</blockquote>

<p><em>Reflect的意思就是把消息反射给子控件处理。</em></p>

<p>大概的就是这样：</p>

<table width="567" border="0" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td align="center" valign="top" width="212">子控件有ON_NOTIFY_REFLECT</td>
<td align="center" valign="top" width="155">父窗口有ON_NOTIFY</td>
<td align="center" valign="top" width="198">效果</td>
</tr>
<tr>
<td align="center" valign="top" width="212">N</td>
<td align="center" valign="top" width="155">N</td>
<td align="center" valign="top" width="198">WM_NOTIFY未被处理</td>
</tr>
<tr>
<td align="center" valign="top" width="212">N</td>
<td align="center" valign="top" width="155">Y</td>
<td align="center" valign="top" width="198">WM_NOTIFY只被父窗口处理</td>
</tr>
<tr>
<td align="center" valign="top" width="212">Y</td>
<td align="center" valign="top" width="155">N</td>
<td align="center" valign="top" width="198">WM_NOTIFY只被子控件处理</td>
</tr>
<tr>
<td align="center" valign="top" width="212">Y</td>
<td align="center" valign="top" width="155">Y</td>
<td align="center" valign="top" width="198">WM_NOTIFY只被子控件处理</td>
</tr>
</tbody>
</table>

<!--more-->

<p>2.EX</p>

<p>ON_NOTIFY和ON_NOTIFY_EX 以及 ON_NOTIFY_REFLECT和ON_NOTIFY_REFLECT_EX</p>

<p>区别是：</p>

<blockquote>
  <p>EX版本的处理函数有BOOL型返回值，表示处理的消息是否继续消息传递
返回TRUE，表示不继续；
返回FALSE，表示继续，即其他控件可以对它做处理。</p>
</blockquote>

<p><em>则EX的意思就是把消息重新放到消息循环，继续遍历别的CmdTargetObject。</em></p>

<p>大概是这样：</p>

<table width="610" border="0" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td align="center" valign="top" width="220">子控件ON_NOTIFY_REFLECT_EX返回值</td>
<td align="center" valign="top" width="144">父窗口有ON_NOTIFY</td>
<td align="center" valign="top" width="244">效果</td>
</tr>
<tr>
<td align="center" valign="top" width="220">TRUE</td>
<td align="center" valign="top" width="144">N</td>
<td align="center" valign="top" width="244">WM_NOTIFY只被子控件处理</td>
</tr>
<tr>
<td align="center" valign="top" width="220">TRUE</td>
<td align="center" valign="top" width="144">Y</td>
<td align="center" valign="top" width="244">WM_NOTIFY只被子控件处理</td>
</tr>
<tr>
<td align="center" valign="top" width="220">FALSE</td>
<td align="center" valign="top" width="144">N</td>
<td align="center" valign="top" width="244">WM_NOTIFY只被子控件处理</td>
</tr>
<tr>
<td align="center" valign="top" width="220">FALSE</td>
<td align="center" valign="top" width="144">Y</td>
<td align="center" valign="top" width="244">WM_NOTIFY被子控件和父窗口处理</td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
</feed>
