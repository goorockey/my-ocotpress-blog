<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: python | Goorockey's Life]]></title>
  <link href="http://goorockey.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://goorockey.github.com/"/>
  <updated>2012-10-30T01:33:42+08:00</updated>
  <id>http://goorockey.github.com/</id>
  <author>
    <name><![CDATA[Goorockey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python发邮件脚本]]></title>
    <link href="http://goorockey.github.com/blog/2012/09/30/python-send-mail/"/>
    <updated>2012-09-30T00:40:00+08:00</updated>
    <id>http://goorockey.github.com/blog/2012/09/30/python-send-mail</id>
    <content type="html"><![CDATA[
<p>项目组有每天值日搞卫生和发工作日报的规定，由于不提醒容易忘记，则想到通过内部邮件定时提醒，练练手。</p>

<p>整个“任务”可以分为发邮件+定时两部分。</p>

<hr />

<h3 id="section">1. 发邮件</h3>

<p>由于服务器是windows系统，google得知，windows下有<a href="http://www.blat.net">blat</a>这发邮件的大杀器，所以刚开始是想用blat+批处理做的。</p>

<p>执行blat -h 或者看官网上的帮助，使用blat发邮件还是很简单的（所以官网特别提醒不要用blat来发SPAM。。)</p>

<p>{% codeblock blat基本用法 %}
blat <邮件正文文件> -from <发送地址> -to <接受地址> -subject <邮件标题> 
        -server <smtp服务器地址> -username <登录服务器用户名> -password <密码 /></登录服务器用户名></smtp服务器地址></邮件标题></接受地址></发送地址></邮件正文文件></p>

<p>blat - -body <邮件正文> -from <发送地址> -to <接受地址> -subject <邮件标题> 
        -server <smtp服务器地址> -username <登录服务器用户名> -password <密码>
{% endcodeblock %}</密码></登录服务器用户名></smtp服务器地址></邮件标题></接受地址></发送地址></邮件正文></p>

<p>blat还可以通过-install把参数保存到注册表。blat确实是自动发邮件的大杀器！</p>

<p><em>P.S 在linux实现自动发邮件，可以用msmtp,sendmail等～</em></p>

<hr />

<p>这本来是很简单的，但因为任务要根据星期几发送邮件给指定的人，而且我们是12个人分成两周，所以想到用一个二维数组存放成员来实现，这也没什么问题。</p>

<p>问题在于在计算要提醒的人时，要根据今天离开始值日的天数，来从数组获取成员，而这求天数在windows用批处理可不好搞，因为要考虑每月不同天数和闰年啊。</p>

<p>当然也不是不能完成，网上也有方法:</p>

<ul>
  <li>http://bbs.bathome.net/thread-11128-1-1.html</li>
  <li>http://bbs.bathome.net/viewthread.php?tid=5659&amp;highlight=%2Bbatman</li>
  <li>http://bbs.bathome.net/viewthread.php?tid=5682&amp;highlight=%2Bbatman</li>
</ul>

<p>嫌麻烦，我还是决定找有现成库的方法来做，所以就想到用有各种库的python实现了。</p>

<!-- more -->

<hr />

<p>python有<a href="http://docs.python.org/library/smtplib.html" title="smtplib">smtplib</a>库实现smtp发邮件，核心代码也很简单：</p>

<p>{% codeblock using smtplib lang:python %}
import smtplib
# some code …
smtp = smtplib.SMTP()
smtp.connect(server)
smtp.login(username, password)
smtp.sendmail(sender, receiver, msg)
smtp.quit()
{% endcodeblock %}</p>

<p>而用python计算相差的天数更是简单不过：</p>

<p>{% codeblock lang:python %}
import datetime
# some code …
days = (datetime.datetime.now() - datetime.datetime(2012,9,30)).days
{% endcodeblock %}</p>

<h3 id="section-1">2.定时</h3>
<p>定时在windows可以用计划任务实现</p>

<p>P.S 在linux可以用cron实现</p>

<h3 id="section-2">3.整个代码</h3>
<p>{% codeblock lang:python%}</p>

<h1 id="codingutf-8">coding=utf-8</h1>
<p>import smtplib
import datetime
import sys</p>

<p>from email.mime.text import MIMEText
from email.header import Header</p>

<p>member = ((‘member1’, ‘member2’, ‘member3’, ‘member4’, ‘member5’, ‘member6’),
        (‘member7’, ‘member8’, ‘member9’, ‘member10’, ‘member11’, ‘member12’))</p>

<p>suffix = ‘@abc.com’</p>

<p>def send_mail(receiver, content_filename,
            sender = ‘admin@abc.com’,
            server = ‘192.168.1.1’,
            username = ‘admin@abc.com’,
            password = ‘admin’):</p>

<pre><code>subject = ''
content = ''

# 从文件读取邮件正文
try:
    content_file = open(content_filename, 'r')
    try:
        subject = content_file.readline()
        content = content_file.read()

        # 转为utf-8
        subject = subject.decode('gbk', 'ignore').encode('utf-8')
        content = content.decode('gbk', 'ignore').encode('utf-8')
    finally:
        content_file.close()
except IOError, e:
    sys.stderr.write("cannot open file " + content_filename)
    return

content = content + "\n\n系统生成，请勿回复 :)"
#print content

# 构造邮件
msg = MIMEText(content, 'plain', 'utf-8')
msg['Subject'] = Header(subject, 'utf-8')
msg['From'] = sender
msg['To'] = receiver


if (len(msg) &gt; 0):
    try:
        # stmp模块发送邮件
        smtp = smtplib.SMTP()
        smtp.connect(server)
        smtp.login(username, password)
        smtp.sendmail(sender, receiver, msg.as_string())
        smtp.quit()

        print "Success"
        return True

    except Exception, e:
        print str(e)
        return False
</code></pre>

<p>def get_on_duty():
    receiver = ‘’
    days = (datetime.datetime.now() - datetime.datetime(2012,10,8)).days</p>

<pre><code>if days &gt; 0:
    days = days + 1 # 提前一天提醒
    week = (days / 7) % 2
    date = (days % 7)

    # 周六发周一的值日
    if date == 6:
        date = 0

    if week &lt; len(member) and date &lt; len(member[week]) and len(member[week][date]) &gt; 1:
        receiver = member[week][date] + suffix

return receiver
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:</p>

<pre><code>if len(sys.argv) &gt; 1:
    job = sys.argv[1]

    # 值日
    if job == 'duty':
        receiver = get_on_duty()
        print receiver

        content_filename = 'duty.txt'
        if datetime.datetime.now().weekday() == 5:
            content_filename = 'duty_Sat.txt'

        if len(receiver) &gt; len(suffix):
            send_mail(receiver = receiver, content_filename = content_filename)

    # 每天日报提醒
    elif job == 'daily':
        send_mail(receiver = 'partner', content_filename = 'daily_alert.txt')
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
